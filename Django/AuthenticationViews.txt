                                                
                                                Authentication Views

https://docs.djangoproject.com/en/4.0/topics/auth/default/#module-django.contrib.auth.views


Django provides several views that you can use for handling login, logout, and password management. These make use of the stock auth forms but you can pass in your own forms as well.

Django provides no default template for the authentication views. You should create your own templates for the views you want to use. The template context is documented in each view, see All authentication views.

---------------------------------------------------
Using the views
---------------------------------------------------

    There are different methods to implement these views in your project. The easiest way is to include the provided URLconf in django.contrib.auth.urls in your own URLconf, for example:

    urlpatterns = [
        path('accounts/', include('django.contrib.auth.urls')),
    ]
    This will include the following URL patterns:

    accounts/login/ [name='login']
    accounts/logout/ [name='logout']
    accounts/password_change/ [name='password_change']
    accounts/password_change/done/ [name='password_change_done']
    accounts/password_reset/ [name='password_reset']
    accounts/password_reset/done/ [name='password_reset_done']
    accounts/reset/<uidb64>/<token>/ [name='password_reset_confirm']
    accounts/reset/done/ [name='password_reset_complete']
    The views provide a URL name for easier reference. See the URL documentation for details on using named URL patterns.

    If you want more control over your URLs, you can reference a specific view in your URLconf:

    from django.contrib.auth import views as auth_views

    urlpatterns = [
        path('change-password/', auth_views.PasswordChangeView.as_view()),
    ]
    The views have optional arguments you can use to alter the behavior of the view. For example, if you want to change the template name a view uses, you can provide the template_name argument. A way to do this is to provide keyword arguments in the URLconf, these will be passed on to the view. For example:

    urlpatterns = [
        path(
            'change-password/',
            auth_views.PasswordChangeView.as_view(template_name='change-password.html'),
        ),
    ]
    All views are class-based, which allows you to easily customize them by subclassing.

    All authentication views¶
    This is a list with all the views django.contrib.auth provides. For implementation details see Using the views.

---------------------------------------------------
class LoginView
---------------------------------------------------
URL name: login

    Methods and Attributes
    ---------------------------------------------------

        template_name
            The name of a template to display for the view used to log the user in. Defaults to registration/login.html.

        next_page
            New in Django 4.0.
            The URL to redirect to after login. Defaults to LOGIN_REDIRECT_URL.

        redirect_field_name
            The name of a GET field containing the URL to redirect to after login. Defaults to next. Overrides the get_default_redirect_url() URL if the given GET parameter is passed.

        authentication_form
            A callable (typically a form class) to use for authentication. Defaults to AuthenticationForm.

        extra_context
            A dictionary of context data that will be added to the default context data passed to the template.

        redirect_authenticated_user
            A boolean that controls whether or not authenticated users accessing the login page will be redirected as if they had just successfully logged in. Defaults to False.

                    Warning

                    If you enable redirect_authenticated_user, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this “social media fingerprinting” information leakage, host all images and your favicon on a separate domain.

                    Enabling redirect_authenticated_user can also result in a redirect loop when using the permission_required() decorator unless the raise_exception parameter is used.

        success_url_allowed_hosts
            A set of hosts, in addition to request.get_host(), that are safe for redirecting after login. Defaults to an empty set.

        get_default_redirect_url()
            New in Django 4.0.
            Returns the URL to redirect to after login. The default implementation resolves and returns next_page if set, or LOGIN_REDIRECT_URL otherwise.

    Here’s what LoginView does:
    ---------------------------------------------------
    If called via GET, it displays a login form that POSTs to the same URL. More on this in a bit.
    If called via POST with user submitted credentials, it tries to log the user in. If login is successful, the view redirects to the URL specified in next. If next isn’t provided, it redirects to settings.LOGIN_REDIRECT_URL (which defaults to /accounts/profile/). If login isn’t successful, it redisplays the login form.
    It’s your responsibility to provide the html for the login template , called registration/login.html by default. This template gets passed four template context variables:

    form: A Form object representing the AuthenticationForm.
    next: The URL to redirect to after successful login. This may contain a query string, too.
    site: The current Site, according to the SITE_ID setting. If you don’t have the site framework installed, this will be set to an instance of RequestSite, which derives the site name and domain from the current HttpRequest.
    site_name: An alias for site.name. If you don’t have the site framework installed, this will be set to the value of request.META['SERVER_NAME']. For more on sites, see The “sites” framework.

    You can specify the name of the GET field which contains the URL to redirect to after login using redirect_field_name. By default, the field is called next.


    Sample registration/login.html 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
        {% extends "base.html" %}

        {% block content %}

        {% if form.errors %}
        <p>Your username and password didn't match. Please try again.</p>
        {% endif %}

        {% if next %}
            {% if user.is_authenticated %}
            <p>Your account doesn't have access to this page. To proceed,
            please login with an account that has access.</p>
            {% else %}
            <p>Please login to see this page.</p>
            {% endif %}
        {% endif %}

        <form method="post" action="{% url 'login' %}">
        {% csrf_token %}
        <table>
        <tr>
            <td>{{ form.username.label_tag }}</td>
            <td>{{ form.username }}</td>
        </tr>
        <tr>
            <td>{{ form.password.label_tag }}</td>
            <td>{{ form.password }}</td>
        </tr>
        </table>

        <input type="submit" value="login">
        <input type="hidden" name="next" value="{{ next }}">
        </form>

        {# Assumes you set up the password_reset view in your URLconf #}
        <p><a href="{% url 'password_reset' %}">Lost password?</a></p>

        {% endblock %}
        If you have customized authentication (see Customizing Authentication) you can use a custom authentication form by setting the authentication_form attribute. This form must accept a request keyword argument in its __init__() method and provide a get_user() method which returns the authenticated user object (this method is only ever called after successful form validation).

    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

---------------------------------------------------
class LogoutView
---------------------------------------------------
Logs a user out.

URL name: logout

Attributes:
---------------------------------------------------

next_page¶
The URL to redirect to after logout. Defaults to LOGOUT_REDIRECT_URL.

template_name¶
The full name of a template to display after logging the user out. Defaults to registration/logged_out.html.

redirect_field_name¶
The name of a GET field containing the URL to redirect to after log out. Defaults to 'next'. Overrides the next_page URL if the given GET parameter is passed.

extra_context¶
A dictionary of context data that will be added to the default context data passed to the template.

success_url_allowed_hosts¶
A set of hosts, in addition to request.get_host(), that are safe for redirecting after logout. Defaults to an empty set.

Template context:

title: The string “Logged out”, localized.
site: The current Site, according to the SITE_ID setting. If you don’t have the site framework installed, this will be set to an instance of RequestSite, which derives the site name and domain from the current HttpRequest.
site_name: An alias for site.name. If you don’t have the site framework installed, this will be set to the value of request.META['SERVER_NAME']. For more on sites, see The “sites” framework.
logout_then_login(request, login_url=None)¶
Logs a user out, then redirects to the login page.

URL name: No default URL provided

Optional arguments:

login_url: The URL of the login page to redirect to. Defaults to settings.LOGIN_URL if not supplied.

---------------------------------------------------
class PasswordChangeView
---------------------------------------------------
URL name: password_change

Allows a user to change their password.

Attributes:
---------------------------------------------------

template_name
The full name of a template to use for displaying the password change form. Defaults to registration/password_change_form.html if not supplied.

success_url
The URL to redirect to after a successful password change. Defaults to 'password_change_done'.

form_class
A custom “change password” form which must accept a user keyword argument. The form is responsible for actually changing the user’s password. Defaults to PasswordChangeForm.

extra_context
A dictionary of context data that will be added to the default context data passed to the template.

Template context:

form: The password change form (see form_class above).

---------------------------------------------------
class PasswordChangeDoneView
---------------------------------------------------
URL name: password_change_done

The page shown after a user has changed their password.

Attributes:
---------------------------------------------------

template_name
The full name of a template to use. Defaults to registration/password_change_done.html if not supplied.

extra_context
A dictionary of context data that will be added to the default context data passed to the template.

---------------------------------------------------
class PasswordResetView
---------------------------------------------------
URL name: password_reset

Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user’s registered email address.

This view will send an email if the following conditions are met:

The email address provided exists in the system.
The requested user is active (User.is_active is True).
The requested user has a usable password. Users flagged with an unusable password (see set_unusable_password()) aren’t allowed to request a password reset to prevent misuse when using an external authentication source like LDAP.
If any of these conditions are not met, no email will be sent, but the user won’t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass PasswordResetForm and use the form_class attribute.

Note

Be aware that sending an email costs extra time, hence you may be vulnerable to an email address enumeration timing attack due to a difference between the duration of a reset request for an existing email address and the duration of a reset request for a nonexistent email address. To reduce the overhead, you can use a 3rd party package that allows to send emails asynchronously, e.g. django-mailer.

Attributes:
---------------------------------------------------

template_name
The full name of a template to use for displaying the password reset form. Defaults to registration/password_reset_form.html if not supplied.

form_class
Form that will be used to get the email of the user to reset the password for. Defaults to PasswordResetForm.

email_template_name
The full name of a template to use for generating the email with the reset password link. Defaults to registration/password_reset_email.html if not supplied.

subject_template_name
The full name of a template to use for the subject of the email with the reset password link. Defaults to registration/password_reset_subject.txt if not supplied.

token_generator
Instance of the class to check the one time link. This will default to default_token_generator, it’s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator.

success_url
The URL to redirect to after a successful password reset request. Defaults to 'password_reset_done'.

from_email
A valid email address. By default Django uses the DEFAULT_FROM_EMAIL.

extra_context
A dictionary of context data that will be added to the default context data passed to the template.

html_email_template_name
The full name of a template to use for generating a text/html multipart email with the password reset link. By default, HTML email is not sent.

extra_email_context
A dictionary of context data that will be available in the email template. It can be used to override default template context values listed below e.g. domain.

Template context:

form: The form (see form_class above) for resetting the user’s password.
Email template context:

email: An alias for user.email
user: The current User, according to the email form field. Only active users are able to reset their passwords (User.is_active is True).
site_name: An alias for site.name. If you don’t have the site framework installed, this will be set to the value of request.META['SERVER_NAME']. For more on sites, see The “sites” framework.
domain: An alias for site.domain. If you don’t have the site framework installed, this will be set to the value of request.get_host().
protocol: http or https
uid: The user’s primary key encoded in base 64.
token: Token to check that the reset link is valid.
Sample registration/password_reset_email.html (email body template):

Someone asked for password reset for email {{ email }}. Follow the link below:
{{ protocol}}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}
The same template context is used for subject template. Subject must be single line plain text string.

---------------------------------------------------
class PasswordResetDoneView
---------------------------------------------------
URL name: password_reset_done

The page shown after a user has been emailed a link to reset their password. This view is called by default if the PasswordResetView doesn’t have an explicit success_url URL set.

Note

If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.

Attributes:
---------------------------------------------------

template_name
The full name of a template to use. Defaults to registration/password_reset_done.html if not supplied.

extra_context
A dictionary of context data that will be added to the default context data passed to the template.


---------------------------------------------------
class PasswordResetConfirmView
---------------------------------------------------
URL name: password_reset_confirm

Presents a form for entering a new password.

Keyword arguments from the URL:

uidb64: The user’s id encoded in base 64.
token: Token to check that the password is valid.
Attributes:
---------------------------------------------------
template_name
The full name of a template to display the confirm password view. Default value is registration/password_reset_confirm.html.

token_generator
Instance of the class to check the password. This will default to default_token_generator, it’s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator.

post_reset_login
A boolean indicating if the user should be automatically authenticated after a successful password reset. Defaults to False.

post_reset_login_backend
A dotted path to the authentication backend to use when authenticating a user if post_reset_login is True. Required only if you have multiple AUTHENTICATION_BACKENDS configured. Defaults to None.

form_class
Form that will be used to set the password. Defaults to SetPasswordForm.

success_url
URL to redirect after the password reset done. Defaults to 'password_reset_complete'.

extra_context
A dictionary of context data that will be added to the default context data passed to the template.

reset_url_token
Token parameter displayed as a component of password reset URLs. Defaults to 'set-password'.

Template context:

form: The form (see form_class above) for setting the new user’s password.
validlink: Boolean, True if the link (combination of uidb64 and token) is valid or unused yet.

---------------------------------------------------
class PasswordResetCompleteView
---------------------------------------------------
URL name: password_reset_complete

Presents a view which informs the user that the password has been successfully changed.

Attributes:
---------------------------------------------------

template_name¶
The full name of a template to display the view. Defaults to registration/password_reset_complete.html.

extra_context¶
A dictionary of context data that will be added to the default context data passed to the template