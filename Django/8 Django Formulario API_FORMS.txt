    
                                            Formulario


    La informacion es Recibida como un objeto request.
    La informacion es Enviada como un objeto response. 
         
            
            (Cliente) Formulario    ---->   Request     ---->   BD  (Backend)                          https://docs.djangoproject.com/en/4.0/ref/request-response/
                                    <----   Response    <----

    ----------------------------------------
    
    FORMS API   

        Old style
            Formulario en HTML

        FORMS API
            Formulario viene de backend    
            -Valida automaticamente
            -Simplifica creacion formularios




    ----------------------------------------------------------------------
    Creacion de Formularios API FORMS                                               Se guarda en un Querydict que es un dicionario con key el atributo y value lo que introdice el cliente
    ---------------------------------------------------------------------
            
        1 Crear forms.py                                                                    (App)

        2 Crear formulario                                                                  <=  Formulario creado con Programacion orientada a Objetos (como Clases). 
                                                                                                Cada Clase representara un Formulario que se plasmara en los templates  


                from django import forms                                                    <= Importar forms

                class Forms1(forms.Form):                                                   <= Hereda de forms 
                    atribut1=forms.CharField()                                              <= clase para Atributos similares a modelos (pero funciones de forms)
                    atribut2=forms.EmailField()                                             <= Cada atributo sera un campo. 
                                                                                                (old style= campos escritos en HTML/template)


        3 Crear View de formulario 
                                                                                            View doble funcion: 
                                                                                                    Si no recibe data   =>  Retorna template con formulario
                                                                                                    Si recibe data/POST =>  Realiza accion

                def formulario_web(request):                                                <= Funcion

                    if request.method=="POST":                                              <= Corre si ingresa data    
                        data= Forms1(request.POST)                                              <= Rescate de request en variable.   (Instanciar Clase Forms creada)              
                        
                        if data.is valid():                                                     <= .is valid      Validador de la clase forms 
                            data_valid= Forms1.cleaned_data                                     <= .cleaned_data  Data a Diccionario   key(atributo)-Value(data)

                            # Manipulacion de data 

                            return render(request, "template.html")

                    else:                                                                   <= Corre si No ingresa data  (Muestra formulario)
                        data= Forms1()                                                          <= la clase formulario empacado en variable
                        return render(request, "form_temp.html", {'formulario': data})          <= Variable con formulario, enviado en el diccionario, html lo utilizara en la template => {{variables}}.
                                                                        
    
        4 Crear Template para formulario / Agregar Token CSRF
        
                <body>
                    <form action="" method="POST"> 
                    {% csrf_token%}                                                         <= IMPORTANTE. token para agregar segurivas vs vulnerabilidad de POST llamada (Cross Site Request Forgery)
                        <table>                                                                                                         <=tabla escrita en HTML
                            {{formulario.as_table}}                                         <= Variable con formulario/     .as_table   (devuelve como tabla html)         
                        </table>                                                                                            (.as_p / .as_ul (como lista desordenada, etc.))
                        <input type="submit" value="Enviar">
                    </form>
                </body>

        

        ----------------------------------------------------------------------
            atributos Clase form                (usarse en view)
        ---------------------------------------------------------------------
                                                                    Parametros
            name = forms.CharField()
            CharField()                                     max_length, min_length, empty_value, strip, /// widget=forms.Textarea
            FloatField                                      max_value, min_value 
            IntegerField                                    max_value, min_value 
            URLField()                                      max_length, min_length, empty_value
            BooleanField
            ChoiceField(list_choice)                        requiere pasar una lista con tuplas:  list_choice= [('model_value', 'Human_read'), ('SO', 'Sophomore')]
            DateField()
            TimeField()
            DateTimeField()                                 Acepta=  '2006-10-25 14:30:59'  '2006-10-25 14:30'  '2006-10-25'
            EmailField()                                    max_length, min_length, empty_value
            ImageField()
            FileField()                                     allow_empty_file, max_length (ength of the filename)
            FilePathField()                                 recursive, match, allow_files, allow_folders 
            etc.
                                                Parametros 
                                                -----------------------------------------
                                                    max_value                           These control the range of values permitted in the field.
                                                    min_value                           These control the range of values permitted in the field.
                                                    label='Your name'                   Label of field
                                                    required=False                      No requerido (Default todo es requerido)
                                                    max_length=100                      Cantidad maxima caracteres
                                                    min_length                          Cantidad minima caracteres
                                                    strip                               Eliminara espacios en blanco al inicio y final
                                                    empty_value                         The value to use to represent “empty”. Defaults to an empty string.
                                                    help_text='100 characters max.      Texto ayuda que aparecera a lado del campo
                                                    recursive                           If False (the default) only the direct contents of path will be offered as choices. If True, the directory will be descended into recursively and all descendants will be listed as choices.
                                                    match                               A regular expression pattern; only files with names matching this expression will be allowed as choices.
                                                    allow_files                         Only files. Default is True. Specifies whether files in the specified location should be included. Either this or allow_folders must be True.
                                                    allow_folders                       Only folders Default is False. Specifies whether folders in the specified location should be included. Either this or allow_files must be True.
        ----------------------------------------------------------------------
            Metodos de la clase forms                   (usarse en view)
        ---------------------------------------------------------------------
        
            .cleaned_data                       Informacion formulario como Diccionario
            .as_ul()                            Informacion en lista para html            (default en tablas)
            .as_p()                             Informacion en parrafos para html
            .as_table


    ----------------------------------------------------------------------
         RESOLICITAR DATOS INCORRECTOS?????????????????
    ---------------------------------------------------------------------

    
        Colocar en el body  del la template:

            {% if forms.errors %}
            <p style="color:red;"> Revisa este campo</p>
            {% endif%}


        --ejemplo----------------------------------------------------
            <body>

                {% if forms.errors %}                                               <=Funcion para resolicitud de datos. 
                <p style="color:red;"> Revisa este campo</p>
                {% endif%}

                <form action="" method="POST"> {% csrf_token%}                      <= El formulario
                    <table>         
                        {{data.as_table}}                                                                  
                    </table>
                    <input type="submit" value="Enviar">
                </form>

            </body>





{% csrf_token%}
<fieldset> </fieldset>
<legend> </legend>
forloop.counter
requiered
  

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ----------------------------------------------------------------------
    FORMULARIO Old Style  (Logica en Html) (Query)
    ---------------------------------------------------------------------
            

        -----View--------------------------------------
            
                def view(request):
                    if request.GET["ID_de_query"]:
                        var_query = request.GET["ID_de_query"]                                                              Recuperar Query 

                        # manipular la Query

                        var_result= Modelo.objects.filter(atributo__incontains = var_query)                                 Definir como hacer la Query solicitada  (__incontains = SELECT FROM >>LIKE)                                                                             
                        return render (request,"template.html", {"resultado":var_result, "query":var_query})                Resultado al usuario
                    else:
                        mensaje: 'No has introducudo nada'
                        return Httpresponse(Mensaje)
            
        ----Template-------------------------------------
        
                <p>Estas buscando: <strong>{{query}}</strong></p>

                {% if resultado %}
                    <p>Resultados: {{resultado|length}}</p>
                    <ul>
                        {% for i in resultado %}
                        <li>
                            {{i.nombre}}        //Or      {{i.atrib1}} &nbsp; {{i.atrib2}} &nbsp; ETC...   {# &nbsp = Espacio en blanco#}
                        </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p>No se encontraron resultados</p>

                {% endif %}
                
  

                
                <fieldset> </fieldset>
                <legend> </legend>
                forloop.counter
                requiered


                <fieldset> 
                    <legend><h1> {{ }} </h1></legend>

                    {% if error_message %}
                        <p><strong> {{error_message}} </strong></p>
                    {% endif%}

                    {% for  xxx    in   xxx. model.all %}
                        <input 
                            type= ""
                            name=""
                            id= ""
                            value=""
                            requiered
                        >
                        <label for= " {{forloop.counter}}">
                            {{ }}
                        </label>
                    {% endfor% } 
                    <br>   
                </fieldset>
                <input type="submit" value="">

        

