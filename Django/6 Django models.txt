
                        Modelos
                        
Para crear modelos, forzosamente se requiere crear application.
No pueden crearse directemente en el project.
Manipular Modelos es manipular BD

Django, en su propio motor tiene la posibilidad de manejar tablas como objetos instanciados de una clase.
Por lo que para nosotros manipulemos una tabla, lo hara representandola para nosotros como una instancia de clase: 

                Una tabla/Entinty   se representara con    Un objeto (instanciado de una clase)
                Cada columna        se representara con    Cada atributo del objeto

QuerySet es la representación del resultado de una consulta a la base de datos, pero devuelta como una lista de instancias. Por ser lista puede iterarse, etc.
                        


--------------------------------------------------------------------------------------
Modelos
--------------------------------------------------------------------------------------    
    
    Estructura General
    ---------------------------------------------

        class Articulo(models.Model):                                           <= Hereda de models.Model
            var = ''                                                                <=Variables
            choices = ( ('male', 'male'), ('feMale', 'female'))
                                        
            name1 = models.CharField(max_length=200)                                <= Fields. Atributos/columnas de tabla
            content1 = models.TextField()
            img = models.ImageField(upload_to='images/')
            sex = models.CharField(choices = choices)

            def __str__(self):
                return self.name1                                                   <= Se mostrara en Shell como nombre, en lugar de verse como objeto
            
            class Meta:                                                             <= subclase para metadatos. Como se mostrara en BD, etc.
                verbose_name = 'Articulo'
                Verbose_name_plural = 'Articulos'
                db_table = "Articulo"
                ordering = ['last_name', 'first_name']

        

    Clases para atributos                   https://docs.djangoproject.com/en/4.1/ref/models/fields/
    ----------------------------------------------
    
        Id primary_key                  models.AutoField(primary_key=True) 
        Texto                           models.CharField()
                                        models.TextField()
        Numeros:                        models.IntegerField()                       -2147483648 to 2147483647
                                        models.SmallIntegerField                         -32768 to 32767
                                        models.PositiveBigIntegerField                        0 to 9223372036854775807             
                                        models.PositiveIntegerField                           0 to 2147483647
                                        models.PositiveSmallIntegerField                      0 to 32767
        Email validos:                  models.EmailField()
        Url validos:                    models.URLField
        Booleanos:                      models.BooleanField()
        Time:                           models.DateTimeField()				campos de fecha y hora automatizados no aparecen en el adminstrador, No visible en Admin, para mostrar datetime en admin: ver abajo.
        Image:                          models.ImageField()                                                     Requiere pip install Pillow.
        ForeingKey:                     models.ForeignKey(ModelPrincipal, on_delete=models.CASCADE)             Id Modelo con relacion 1 sera el FK de Modelo relacion muchos
        Relacion n a n                  models.ManyToManyField(ModelRelacion)

        Argumentos particulares
        ----------------------------------------------
            max_length=8
            on_delete=models.CASCADE    si se borra la columna, todas se borraran


        models.Field general parameters
        ---------------------    
            primary_key                                     If True, this field is the primary key for the model.
            blank=                                          Defautl False. Permite la no entrada de valor en field
            Null =                                          Default False. True = permite guardara valor NULL. (no usar en Fields que usan str porque str vacio y null es redundante y convencion Django dice q se deja strings vacios)
            default =                                       Valor default. (valor u objeto)
            db_column =                                     The name of the database column to use for this field. If this isn’t given, Django will use the field’s name.
            editable =                                      Default True. Si Falso, no se mostrara en el admin
            error_messages                                  Permite hacer override el mensaje default que aldra (raise) Requiere diccionario (key(error): mensaje a overide)
            verbose_name =                                  Como se nombrara y sera visible ( ej en admin, etc). Default atributo name (Django cambiara _ por espacios) todo puede estar en ingles pero para nuestros usuarios podremos nombrarlos en el idioma que usan.
            unique =                                        default False. True: Debe ser unico en la tabla
            validators                                      Validacion (validators documentation)

        ImageField
        -----------------
            upload_to ='url/'                               Indicara donde se guardara imagen. Incluye .save(), POr Pillow library. (debes descargar Pillow)   
                                                                models.ImageField(upload_to='imagenes/')
        DateTimeField
        -----------------
            auto_now_add = True				    created = models.DateTimeField(auto_now_add=True, verbose_name="Fecha de creación")
            auto_now=True				    updated = models.DateTimeField(auto_now=True, verbose_name="Fecha de edición")

        class Meta 
        ----------------------                                                           
                verbose_name =                              Nombre como aparecera en singular la tabla(tmb en admin)
                Verbose_name_plural =                       Nombre en caso de ser plural la tabla(tmb en admin)
                db_table =                                  Como se nombrara en la BBDD
                ordering = ['']                             Es una lista. Ordena los registros (tmb en admin) por default. si se le coloca '-' ordenara de manera invertida (ej ordering = ['-name'])
                

        validation
        ----------------------
            Sintaxis
                field_name = models.Field(validators = [function 1, function 2]) 

            ej.
                mail = models.CharField(validators =[validate_geeks_mail])          (solo aceptara emails de gmails )

                from django.core.validators import MaxValueValidator, MinValueValidator
                integer_field = IntegerField(
                    default=1,
                    validators=[
                        MaxValueValidator(100),
                        MinValueValidator(1)
                    ]
                )
                
        choices
        ------------------------
        Manera de dar opciones especificas en un Field.

            1 Metodo. (profesional)
                Crear choices.py en app
                Importar choices a models
                Agregar Field con choices

            1 Metodo recomendado                (HARD CODE)
                Dentro del modelo crear las choices. Dentro de variable que contiene tupla con dentro otras tuplas con las opciones.
                    var= ( ('value', 'display_text'))
                    var= ( ('value', _('display_text')))                            <= escalable para traduccion en un futuro.

                -----------------------------------------------------------------
                Opcion general
                
                    class Model1(models.Model):
                        SEXO =(
                            ('f', _('femenino')),
                            ('m', _('masculino'))
                        )            
                    
                        sex = models.CharField(max_length= 1, choices= SEXO, default = 'f')
                -------------------------------------------------------------------
                Opcion con  integer field:

                    class Book(models.Model):
                        STATUS = (
                            (1,  _('Available to borrow')),
                            (2, _('Borrowed by someone')),
                            (3, _('Archived - not available anymore')),
                        )
                        # [...]
                        status = models.PositiveSmallIntegerField(
                            choices=STATUS,
                            default=1,
                        )

            2 Metodo con variables   (NO HARDCODE but LONG)

                def Model1(models.Model):
                    FEMENINO = 'f'
                    MASCULINO = 'm'

                    sexos =(
                        (FEMENINO, _('femenino')),
                        (MASCULINO, _('masculino'))
                    )            
                
                    sex = models.CharField(max_length= 1, choices= sexos, default = FEMENINO)

        Relaciones entre tablas  (ForeingKey)
        ----------------------------------
        var = models.ForeignKey(Modelo1, attrs)
            Modelo1                         indica la relacion hacia
            null= True, blank=True          Porque al inicio no contamos con valores o puede haber relacion 0   
            on_delete=models.CASCADE        Also deletes the object containing the ForeignKey. Cuando se elimina un objeto al que se hace referencia, también se eliminarán todos los objetos que hacen referencia a ese objeto
            on_delete=models.PROTECT        Prevent deletion of the referenced object by raising ProtectedError. El argumento PROTEGER evita la eliminación del objeto referenciado si hay objetos que hacen referencia a este objeto. 
            on_delete=models.RESTRICT       Prevent deletion of the referenced object by raising RestrictedError. Unlike PROTECT, deletion of the referenced object is allowed if it also references a different object that is being deleted in the same operation via a CASCADE relationship.
                                            Se permite la eliminación del objeto referenciado si los objetos que hacen referencia y el objeto referenciado hacen referencia a algún otro objeto común en una relación “CASCADA”.
            SET_NULL                        Cuando se elimina el objeto referenciado, en objeto que hace referencia el valor donde estaba el objeto referenciado cambia a null (user eliminado, pero sus blogs se quedan a nombre de Anonimo (null))
                                            *requiere tener tambien argumento null=True 
            SET_DEFAULT                     *requiere valor  colocar un => default = value   || XYZ = models.ForeignKey(WASD, on_delete = models.SET_DEFAULT, null = True, default = QWERTY) ||
            SET()                           = que SET_DEFAULT pero podemos pasar un invocable.
            DO_NOTHING                      No se hará nada para manejar los efectos de la eliminación
            
            related_name = 'newname'        Renombrar la tabla relacionada


        Relaciones muchos a muchos                  https://www.youtube.com/watch?v=QBzsoQPgJQ8
        ----------------------------------
            Se realiza usando ManyToManyField de models. Creara una tercera tabla con 2 columnas que seran llaves foraneas.

                from django.db import models

                var= models.ManyToManyField('ModelRelacion')

            Ingreso a los datos:
                Desde tabla que referencia:
                    tab2.tab1.all()
                    tab2.tab1.filter()
                    tab2.tab1.count()

                    Remover un objeto relacionado
                        tab2.tab1.remove(Objetoaquitar)
                    
                Desde tabla que es referenciada por otras (tabla que referencia en minusculas + _set)
                    tab1.tab2_set.all()      

                                 
                
         Relaciones muchos a muchos  .through                   Elegir manualmente la join table            https://www.youtube.com/watch?v=oDeHM_SQNnM
        ---------------------------------
            ManyToManyField.through                     Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the 
                                                        intermediary table, you can use the through option to specify the Django model that represents the intermediate table that you want to use.
                                                        The most common use for this option is when you want to associate extra data with a many-to-many relationship.

                        ej-------------------------------------

                            class Person(models.Model):
                                name = models.CharField(max_length=128)

                                def __str__(self):
                                    return self.name

                            class Group(models.Model):
                                name = models.CharField(max_length=128)
                                members = models.ManyToManyField(Person, through='Membership')

                                def __str__(self):
                                    return self.name

                            class Membership(models.Model):
                                person = models.ForeignKey(Person, on_delete=models.CASCADE)
                                group = models.ForeignKey(Group, on_delete=models.CASCADE)
                                date_joined = models.DateField()
                                invite_reason = models.CharField(max_length=64)



    Mostrar campos de fecha y hora en admin 
    --------------------------------------
    En Admin de app agregar mas codigo: Clase con los campos a ver solo en read_only
    
    Ej. App Project/ modelo Project
    
    from django.contrib import admin
    from .models import Project

    class ProjectAdmin(admin.ModelAdmin):
    	readonly_fields = ('created', 'updated')

    admin.site.register(Project, ProjectAdmin)
    
    
     
--------------------------------------------------------------------------------------
Migraciones
--------------------------------------------------------------------------------------
    Hacer y Migrar Modelos
        En cmd
        >>> python manage.py makemigrations 
	    >>> python manage.py migrate 


    Migracion con numero de control
        En cmd
        >>> python manage.py makemigrations 
                (rescatar numero de migracion de 4 digitos)
        >>> python manage.py sqlmigrate APP Num_migracion


--------------------------------------------------------------------------------------
Funcion de Shell  para Modelos
--------------------------------------------------------------------------------------
    
    Puede usarse para:
        -crear registros
        -Modificar registros
        -Buscar y filtrar registros
    
    dentro de nuestra base de datos 
        -por terminal 
        -sin usar admin de Django

Ver en Shell
    
