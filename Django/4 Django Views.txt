
                                -------------------------------------------------
                                                        Views
                                -------------------------------------------------

    Crear una view es pensar que estamos creando una pagina del sitio web

    Funciones llamadas por URL especifico, tienen la lÃ³gica.
    LLaman y ejecutan Template

        - Reciben     Httprequest
        - Dan objeto  Httpresponse como Return.


    2 tipos de Views:
        Funciones:      => Funtion Based Views
                            Personalizadas por nosotros, tareas muy especificas y complejas.

        Clases:         => Generic Views
                            Vistas prediseniadas por Django, tareas comunes en todas las pag webs.
        

-------------------------------------------------
Function Based Views
-------------------------------------------------

    Reciben siempre como parametro de funcion un request (un objeto tipo HTTPrequest)  
            (ej. frontend manda un formulario con metodo POST: request es un objeto,  POST es atributo de request que como valor tiene un diccionario) (acceder a valores del frontend = request.POST['key'])
    Respuesta con render, HttpResponse, redireccion...

   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    App_views.py
        from django.shortcuts import render
        from django.http import HttpResponse
        

        def view(request):
            return HttpResponse("")                                                             <= Responder con objeto con HttpResponse

        def view(request):
            return render(request, 'app/template.html', {"Diccionario": opcional})              <= Responder con render



    Funcion render
    ----------------------------------------
        Requiere minimo 2 parametros
        -request                                    <= Objeto request
        -Template                                   <= URL en str. Django toma todas las carpetas llamadas templates y las une como si fuera una, Por lo que la url inicia con la subcarpeta dentro de la carpeta template.

        Adicionales
        -diccionario                                <= Context. Variables a mandar a HTML/Template, para usarse alli.
                                                        {'Nombre_de_var' : Valor}
                                                        ej.     {'var1' : Variable}


    Recibir valores a la funcion                                        Funcion recive valores desde url de HTML.
    ---------------------------------------

        def view(request, param)                                        1.- Agregar parametro a la view/funcion                 (views.py)

        path("<param>/"), views.view1, name='')                         2.- Agregar parametro dentro del str del path/URL       (App.urls.py)
        path("/url/<int: user_id>/"), views.view2, name='')                            "<type:param >"

                                                                            urlpatterns = [
                                                                                path("<int:user_id>/"), view.user, name='Search user')
                                                                            ]

        <a href="/url/{{variable}}>  </a>                               3.- Declarar en el HTML variable a enviarse por url


    Manejo de errores // get_object_or_404
    -----------------------------------------

        get_object_or_404(Clase, condicion)                 <=  Elevar error 404 si no hay un registro
                                                                Funciona como get, en caso de no objeto en bd reise eror 404

                                                                def users(request, user_id):
                                                                    user = get_object_or_404(Users, user_id)


    Busqueda y Manipulacion de modelos
    -----------------------------------------
        ---------------------------------------------------------    
        Creat
        -------------------
            
            Model1(attr1= value, attr2= Value).save()                           Crear registro (= INSERT INTO...)  (incluye llamada a la clase Model + funcion para Guardado en BD .save() ) 
            
            Model1.objects.create(attributes)                                   Crear registro (= INSERT INTO...)

            .save()                                                             Guarda en la base de datos


        ---------------------------------------------------------     
        Query                                                       https://docs.djangoproject.com/en/3.2/topics/db/queries/#field-lookups-intro
        -------------------
                                                                                ####Funciones de los objects
            .all()
            Model1.objects.all()                                                Muestra todos los registros de ese modelo 
                                                                                    (Como objetos, o muestra nombre (__str__) )

            .get()
            Model1.objects.get(attr = value)                                    Busqueda de 1 registro                  (= SELECT...)   
                                                                                    ERROR si multiples registros/ si 0 registros

            .filter()
            Model1.objects.filter(attr= value)                                  Busqueda de multiples registros     (= SELECT...)
            Model1.objects.filter(attrX= value, attrZ= value)                       Regresa QuerySet []
            Model1.objects.filter(precio__gte=100).order_by("precio")               QuerySet vacio si no hay registros (no da Error)


            .order_by()                                                         Similar a filter porque lleva na query en su paraametro, pero permite agregar criterio de ordenamiento.
            Model1.objects.order_by("atributo")                                     Ordenar Ascendentemente (abc... / Viejo a nuevo/ 1234...)
            Model1.objects.order_by("-atributo")                                    Ord descendentemente  (zxy... / nuevo a viejo / 9876...)
            Model1.objects.order_by("atributo")[:]                                  Especificar cantidad con slice


                                                                                Metodos especiales de busqueda (Son parte de cada columna de los registros (atributos/instancia))
            .get(attr__gte = value)                                             --------------------------------------------------------                                                                            
                                                                                    pk                      =   Primary key
                                                                                    __startswith=""         =   Valor que empieza con     
                                                                                    __endswith=             =   Valor termina con  
                                                                                    __contains              =   Contiene en cualquier parte...
                                                                                    __exact                 =   Exactamente el valor de                                                                                
                                                                                    __gt                    =   Mayor que
                                                                                    __gte                   =   Mayor o igual que
                                                                                    __lt                    =   Menor que
                                                                                    __lte                   =   Menos o igual que  
                                                                                    __range(#,#)            =   Rango     

                                                                                    __year                  =   Anio

                                                                                    __iexact                =   case-insenstive de match
                                                                                    __icontains             =   case-insensitive de contains
                                                                                    __istartswith           =   case-insensitive de startswith
                                                                                    __iendswith             =   case-insensitive de endswith



            var = Model1.objects.get(attr = 'value')                            Vaciar registro en variable (Cualquier Metodo de busqueda)                                    

            var.attr                                                            Ver valor del atributo de ese registro


        ---------------------------------------------------------
        Update/ Delete                             Modificaciones de registros:  Requiere Vaciarse en una Variable (Crear identificador para el objeto)
        -------------------

            var = Model1.objects.get(attr = 'value')                            Vaciar registro en variable (Cualquier Metodo de busqueda)  
            var = get_object_or_404(Clase, condicion)                           Vaciar objeto (BD o frontend), si no disponible lanza error 404 (no otro error)                                   

            var.attr = New_info                                                 Modificar registro (= UPDATE...) 
            var.save()                                                          Guardar cambio en BBDD         

            var.delete()                                                        Borrar registro   (= DELETE WHERE...)
        
        
        ---------------------------------------------------------
        Acceder a Modelos relacionados con ForeingKey                               
        -------------------                                         Modelo1 (1--->Muchos) Modelo2 (ForeignKey = representara a Modelo1.id)

            var = Model.objects.get(pk = 1)
            var.name2.all()                                         Accederemos a todos los registros de modelo 2 (Porque Modelo1 estaba relacionada con Modelo2 (Modelo2 FK = ID de Model1))
                                                                            ||Model2 =    def __str__(self):   ||  
                                                                            ||                return self.name2||

            var.name2.create(attr1=value, attr2=value)              Crearemos registro de modelo2 relacionada con registro de Modelo1. (cada vez ingresar todos los atributos requeridos-Sin default del Modelo2)
                                                                    Podemos llamar misma funcion cada vez con valores diferentes. Creacion de multiples registros de modelo2 relacionadas con un solo registro de Modelo1.
                                                                            Relacion 1 ----> 1 o muchos
                                                            
            var.name2.count                                         Cuenta todos los registros relacionados de X modelo con el Modelo1 (esta ocacion registros de Modelo2)                                            


    URL dinamica en view
    -------------------------------
        reverse("APP1:Path1", args=(,))                                         URL dinamica. Evitar el hard code (Codigo no autovariable segun contexto, y que modifica modularizacion y uso en otros proyectos)Requiere importacion.
                                                                                    reverse()       Funcion
                                                                                    "APP1:Path1"    "URL"     Vincula url a un path de manera dinamica gracias a que identifica:
                                                                                                                1o- la App      app_name='name' 
                                                                                                                2o- path name   urlpatterns = [ path("<url/>", views.v2, name ="path_name")]
                                                                                    args=(,)        Argumentos opcionales a mandar a la sig view. IMPORTANTE, aunque sea un solo argumento debe de finalizar en coma ,
                                                                                Similar a {% url 'name1:name2' v1%} de template


    Redirigir de view a otra pagina (view)
    -----------------------------------------
        from django.http import HttpResponseRedirect                            Importar HttpResponseRedirect
        from django.core.urlresolvers import reverse                            Importar reverse             
        return HttpResponseRedirect(reverse('url_name', args=(,)))              Redirige a usuario a otra pagina. 
                                                                                    -HttpResponseRedirect igual a HttpResponse, pero se asegura que no se reenvie el formulario por error
                                                                                    -reverse: URL dinamico "vs hard code)


-------------------------------------------------
Class Based Views       (Generics Views)                                   https://ccbv.co.uk/
-------------------------------------------------
    Vistas basada en Programacion basada en objetos. 
    Django ya provee de antemano vistas predeterminadas para funciones muy comunes en las paginas web. (login,logout,etc.)
    Ayudan a respetar principio DRY, y Principio de "no reinventar la rueda"

    Views disponbibles
    --------------------
        Authentication Views
            login view
            logout view
            PasswordChangeDoneView
            PasswordChangeView
            PasswordResetCompleteView
            PasswordResetConfirmView
            PasswordResetDoneView
            PasswordResetView

        GENERIC EDIT
            CreateView
            DeleteView
            DeleteViewCustomDeleteWarning
            FormView
            UpdateView

        GENERIC LIST
            ListView

        GENERIC DETAIL
            DetailView
    
        Etc.

    Implementar una view. 
    ------------------------------------
        1.- Metodo include
        --------------------------
            - En urls.py incluir el grupo de views deseado. Esta representara todas la urls predefinidas incluidas en su grupo. 

                        ej. Authentication Views:
                        ----------------------
                            urlpatterns = [
                                path('accounts/', include('django.contrib.auth.urls')),
                            ]

                            Incluye los siguientes patrones URL
                            -----------------------------------
                                accounts/login/ [name='login']
                                accounts/logout/ [name='logout']
                                accounts/password_change/ [name='password_change']
                                accounts/password_change/done/ [name='password_change_done']
                                accounts/password_reset/ [name='password_reset']
                                accounts/password_reset/done/ [name='password_reset_done']
                                accounts/reset/<uidb64>/<token>/ [name='password_reset_confirm']
                                accounts/reset/done/ [name='password_reset_complete']

        2.- Metodo de view especifica
        --------------------------
            - Importar a urls.py el grupo de urls deseado y crear el path para la view especifica deseada.
            - Agrega ademas opcion de pesonalizar el comportamiento de la vista. Pasar argumentos a la func .as_view()

                        ej. Change password view:
                        -----------------------
                            from django.contrib.auth import views as auth_views

                            urlpatterns = [
                                path('change-password/', auth_views.PasswordChangeView.as_view()),
                            ]

                        Personalizacion ej. change name of template:
                        -----------------------
                                path('change-password/', auth_views.PasswordChangeView.as_view(template_name='change-password.html')

            
        3.- Metodo de subclases
        --------------------------
            - Heredar la generic views a una subclase y hacer override de atributos o metodos que deseamos diferentes desde la hija.

                views.py
                    from django.views.generic import TemplateView                   <= Importar Generic View en View

                    class MyAboutView(TemplateView):                                <= Heredar de la View deseada
                        template_name = "about.html"                                <= Atributo a override

                urls.py
                    from some_app.views import AboutView                            <= Importar a nuestra view hija en urls.py

                    urlpatterns = [
                        path('about/', MyAboutView.as_view()),                      <= .as_view() ??????????/
                    ]


-------------------------------------------------
Class Based Views       (Generics Views)                                   https://ccbv.co.uk/
-------------------------------------------------

    Implementar una view Metodo de subclases. 
    ------------------------------------
    
        -Heredar la generic views a una subclase y hacer override de atributos o metodos que deseamos diferentes desde la hija.

            views.py
                from django.views.generic import ListView, etcView              <= Importar Generic View en View  

                class MyAboutView(TemplateView):                                <= Heredar de la View deseada. Convension: agregar View al final del nombre de la view.
                    template_name = "about.html"                                <= Atributo a override

                    
                    def get_queryset(self):                                     <= Metodo override
                    """Docstrings"""
                        return

            urls.py
                urlpatterns = [
                    path('about/', MyAboutView.as_view()),                      <= .as_view(). Metodo de Generic views que permite que la clase creada sea considerada una view.
                ]



        -Recibir parametros desde url
            En clase:
                -No requeremos especificarse, al heredar de Generic clase Autoentiende. (ver cada clase)
            En url
                -Definir valores que entienda la clase (ver cada clase)

                urlpatterns = [
                    path('<int: pk>/', views.MyviewView.as_view()),
                ]


    Class Based Views types
    ------------------------
        class MyView(ListView):                                                     <= Heredar de ListView
            template_name= "app/temple.html"                                        <= Ubicacion del Template a renderizar
            context_object_name= "var"                                              <= Contexto. Variables a mandar a HTML/Template, para usarse alli.

            def get_queryset(self):                                                 <= Metodo ej. para obtener datos una query (para ej. vaciar una query a "var" de Context)
                """Docstrings"""
                return Model1.objects.filter(attr= value)               


        class MyView(generic.DetailView)                                            <= Heredar de DetailView
            template_name= "app/temple.html"                                        <= Ubicacion del Template a renderizar
            model = Model1                                                          <= Recibe modelo donde buscara (segun parametro recibido por url)
                                                                                        Realiza validacion automatica (get_object_or_404)
                                                                                        


