driver = 1

"""
Automatizacion de Test

-------------------------------------
Instalacion
-------------------------------------

Requerimientos a instalar:

    Requerido
    ------------------
        1.- Selenium
        2.- webdriver-manager           (Descargar driver para sitios web de Selenium)
    
    Opcionales
    -----------------
        3.- PyUnit Report               (Escribira reporte de lo realizado por selenium en PDF)
        4.- Unittest                    (Framework para realizar pruebas)(Selenium por si solo no tiene tools de pruebas, solo es un bot/automatizacion)
                                        (alternativas a Unittes= pytest, nose)
  

    ( Venv )
    1-   pip install selenium
    2-   pip install webdriver-manager
    3-   pip install pyunitreport           (opcional)



driver => Objeto que realizara todas las acciones en el browser. 
"""


"""----------------------------------
UNITTEST                             
----------------------------------"""
"""                   
Framework para realizar pruebas. Selenium por si solo no tiene tools de pruebas, solo es un bot/automatizacion

class MyClase(unittest.TestCase):                       <---Hereda de unittest.TestCase. TesCase indica a unittest que esta clase es un test
    def setUp(self):                                    <---The setUp method is part of initialization. This method will get called before every test function which you are going to write in this test case class
        self.driver = webdriver.Firefox()
        
    def test_search_(self):                             <--- El Test. The test case method should always start with characters test
        driver = self.driver
        
    def tearDown(self):                                 <---The tearDown method will get called after every test method. This is a place to do all cleanup actions
        self.driver.close()                                 <-- cierra Tab
        self.driver.quit()                                  <-- Cierra todo el Browser
"""



"""--------------------
Indice
--------------------"""
"""
- Script basico
- Drivers para Browsers
- Navegacion
- Locators
- Interaction
- Assertions (validadores)

"""

"""--------------------------------------
Script Basico de test (unittest-Selenium) en OOP
--------------------------------------"""

# Importaciones 
### Librerias que gustes usar ##############
import unittest                                                           
from pyunitreport import HTMLTestRunner                              
import time

### Driver #################################
from selenium import webdriver                                          #<---- Importar driver especifico para web en donde se realizara test 
from selenium.webdriver.chrome.service import Service as ChromeService              #<-- (Este para Chrome)
from webdriver_manager.chrome import ChromeDriverManager


class TestName(unittest.TestCase):                                      #<---- Crear clase para un Test case (/Unittest)

    @classmethod                                                            #<---- Decorador (multiples test - una sola pagina)
    def setUpClass(cls):                                                    #<---- Inicializa Test (Test Fixture/Unittest)
        cls.driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))    #<---Instala Driver de Browser. Asigna Driver a variable driver. 
        time.sleep(2)

    def test_visit_wikipedia(self):                                     #<----Pruebas Unitarias a realizar (inician siempre con test_ (buena practica))
        self.driver.get('https://www.wikipedia.org')                                #<--Abrir Webpage
        time.sleep(2)

    @classmethod                                                            #<---- Decorador (multiples test - una sola pagina)
    def tearDownClass(cls):                                                 #<---- Instrucciones para finalizacion de la prueba (Test Fixture/Unittest)
        cls.driver.quit()                                                           #<--cierra Webpage


if __name__ == "__main__":                                              #<---- Name de la clase (iniciar codigo desde consola)
    unittest.main(                                                
        verbosity = 2,                                            
        testRunner = HTMLTestRunner(                                        #<---- Llamar a TestRuner para generar reporte de prueba
            output = 'report',                                                      #<-- Carpeta del reporte
            report_name = 'test-report')                                    #<-- Nombre del reporte
            )
                   


"""-------------------------------------------------------------
    Drivers: https://github.com/SergeyPirogov/webdriver_manager
-------------------------------------------------------------"""
"""
    Edge
        from selenium import webdriver
        from selenium.webdriver.edge.service import Service as EdgeService
        from webdriver_manager.microsoft import EdgeChromiumDriverManager

        cls.driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))
    
    Firefox
        from selenium import webdriver
        from selenium.webdriver.firefox.service import Service as FirefoxService
        from webdriver_manager.firefox import GeckoDriverManager

        cls.driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))
"""        
        

"""-------------------------------------------------------------
Navegacion     
-------------------------------------------------------------"""

driver.get("http://www.example.com")

driver.forward()

driver.back()

#cambio de ventana
driver.switch_to_window("windowName")

#Cambio de frame
driver.switch_to_frame("frameName")

#Cambio de frema a subframe child
driver.switch_to_frame("frameName.0.child")

#Regresar al parent frame
driver.switch_to.default_content()

#Cambio a un pop up
alert = driver.switch_to.alert



"""----------------------------------------------------------
    Locators
-------------------------------------------------------------"""
"""
    Seleccionar elementos de la pag web para interactuar con ellos.
    Seleccionar un elemento especifico, seleccionar varios, seleccionar varios y luego hacerles un ciclo for, etc...
    Requiere la importacion de By

        Tradicional locators:
            Identifican precisamente un elemento
            Id / Name / class / XPATH / CSS selector / Link Text / PartialLinkText
            
        Relative Locators:
            Cuando un elemento no es facilmente identificable, se puede apoyar en otros que si lo son:
            Above / Below / Left of / Right of / Near / Chain of multiples relative locators
            
    Normalmente se vacia el elemento localizado en una variable para posteriormente manipularlo con Interactions, etc.
------------------------------------------------------------"""

#import by
from selenium.webdriver.common.by import By


#Tradicional locators---------- .find_element()
        
driver.find_element(By.ID, "search")     
    
driver.find_element(By.NAME, "q")

"""<html>
<body>
<p class="content">Site content goes here.</p>
</body>
</html>"""
driver.find_element(By.CLASS_NAME, "content")  
driver.find_element(By.CLASS_NAME, "search-button")

driver.find_element(By.TAG_NAME, "img")
driver.find_element(By.TAG_NAME, "h1")

driver.find_element(By.XPATH, "//*[@id='top']/body/div/div[2]/div[2]/ul/li[4]/a/img")

"""<html>
<body>
<p class="content">Site content goes here.</p>
</body>
</html>  
https://saucelabs.com/resources/articles/selenium-tips-css-selectors"""
driver.find_element(By.CSS_SELECTOR,"p.content")
driver.find_element(By.CSS_SELECTOR, "div.header-minicart span.icon")  


"""<html>
<body>
<p>Are you sure you want to do this?</p>
<a href="continue.html">Continue</a>
<a href="cancel.html">Cancel</a>
</body>
</html> """
driver.find_element(By.LINK_TEXT, 'Continue')
driver.find_element(By.PARTIAL_LINK_TEXT, 'Conti')


    
#Relative Locators------------- locate_with()

locate_with(By.ID, "search").above({By.ID: "password"})

locate_with(By.ID, "search").below({By.ID: "email"})

locate_with(By.ID, "search").to_left_of({By.ID: "submit"})

locate_with(By.ID, "search").to_right_of({By.ID: "cancel"})

locate_with(By.ID, "search").near({By.ID: "lbl-email"})
    
locate_with(By.TAG_NAME, "button").below({By.ID: "email"}).to_right_of({By.ID: "cancel"})


#---------------------------------------------------------
#---------------------------------------------------------
from selenium.webdriver.common.by import By

def test_search_text_field(self):
    search_field = self.driver.find_element(By.ID, "search")

submit_button = locate_with(By.TAG_NAME, "button").below({By.ID: "email"}).to_right_of({By.ID: "cancel"})
#---------------------------------------------------------
#---------------------------------------------------------    



"""-------------------------------------------------------------
Interactions     https://www.selenium.dev/documentation/webdriver/elements/interactions/
-------------------------------------------------------------"""
"""
Instrucciones para manipura e interactuar

5 basicos:
    click       (to any element)
    send keys   (text fields and content editable elements)
    clear       (text fields and content editable elements)
    submit      (send form elements)
    select      ()
"""


.clear()

.send_keys("pycon")

.click()

.submit()



#Keys  (nos provee de keys como RETURN, F1, ALT etc)
from selenium.webdriver.common.keys import Keys

.send_keys(Keys.RETURN)

.send_keys(" and some", Keys.ARROW_DOWN)


#Select
from selenium.webdriver.support.ui import Select

select = Select(driver.find_element(By.NAME, 'name'))

select.select_by_index(index)

select.select_by_visible_text("text")

select.select_by_value(value)    

select.deselect_all()


#Drag and drop 
from selenium.webdriver import ActionChains

element = driver.find_element(By.NAME, "source")

target = driver.find_element(By.NAME, "target")

action_chains = ActionChains(driver)

action_chains.drag_and_drop(element, target).perform()




"""-------------------------------------------------------------
Assertions    (valdacion)
-------------------------------------------------------------"""
"""
Validar que un valor en la ejecucion del test sea correcto
Si falso = Test se para
Si Verdadero = Test continua
"""

self.assertIn("Python", driver.title)
self.assertNotIn("No results found.", driver.page_source)



"""-------------------------------------------------------------
waits     
------------------------------------------------------------"""
"""
Implicit wait
Explicit wait

"""




"""-------------------------------------------------------------
Cookies
------------------------------------------------------------"""


# Go to the correct domain
driver.get("http://www.example.com")

# Now set the cookie. This one's valid for the entire domain
cookie = {'name' : 'foo', 'value' : 'bar'}
driver.add_cookie(cookie)

# And now output all the available cookies for the current URL
driver.get_cookies()