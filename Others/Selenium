
"""
Automatizacion de Test

-------------------------------------
Instalacion
-------------------------------------

Requerimientos a instalar:

    Requerido
    ------------------
        1.- Selenium
        2.- webdriver-manager           (Descargar driver para sitios web de Selenium)
    
    Opcionales
    -----------------
        3.- PyUnit Report               (Escribira reporte de lo realizado por selenium en PDF)
        4.- Unittest                    (Framework para pruebas unitarias)(creacion de clases de pruebas)
  

    ( Venv )
    1-   pip install selenium
    2-   pip install webdriver-manager
    3-   pip install pyunitreport           (opcional)



driver => Objeto que realizara todas las acciones en el browser. 
"""


"""
--------------------
Indice
--------------------
- Script basico
- Drivers Browser
- Locators
- Interaction
- Assertions (validadores)

"""

#--------------------------------------
#Script Basico de test en OOP
#--------------------------------------

# Importaciones 
### Librerias que gustes usar ##############
import unittest                                                           
from pyunitreport import HTMLTestRunner                              
import time

### Driver #################################
from selenium import webdriver                                          #<---- Importar driver especifico para web en donde se realizara test 
from selenium.webdriver.chrome.service import Service as ChromeService              #<-- (Este para Chrome)
from webdriver_manager.chrome import ChromeDriverManager


class TestName(unittest.TestCase):                                      #<---- Crear clase para un Test case (/Unittest)

    @classmethod                                                            #<---- Decorador (multiples test - una sola pagina)
    def setUpClass(cls):                                                    #<---- Inicializa Test (Test Fixture/Unittest)
        cls.driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))    #<---Instala Driver de Browser. Asigna Driver a variable driver. 
        time.sleep(2)

    def test_visit_wikipedia(self):                                     #<----Pruebas Unitarias a realizar (inician siempre con test_ (buena practica))
        self.driver.get('https://www.wikipedia.org')                                #<--Abrir Webpage
        time.sleep(2)

    @classmethod                                                            #<---- Decorador (multiples test - una sola pagina)
    def tearDownClass(cls):                                                 #<---- Instrucciones para finalizacion de la prueba (Test Fixture/Unittest)
        cls.driver.quit()                                                           #<--cierra Webpage


if __name__ == "__main__":                                              #<---- Name de la clase (iniciar codigo desde consola)
    unittest.main(                                                
        verbosity = 2,                                            
        testRunner = HTMLTestRunner(                                        #<---- Llamar a TestRuner para generar reporte de prueba
            output = 'report',                                                      #<-- Carpeta del reporte
            report_name = 'test-report')                                    #<-- Nombre del reporte
            )
                   

"""
-------------------------------------------------------------
Drivers: https://github.com/SergeyPirogov/webdriver_manager
-------------------------------------------------------------
    Edge
        from selenium import webdriver
        from selenium.webdriver.edge.service import Service as EdgeService
        from webdriver_manager.microsoft import EdgeChromiumDriverManager

        cls.driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))
    
    Firefox
        from selenium import webdriver
        from selenium.webdriver.firefox.service import Service as FirefoxService
        from webdriver_manager.firefox import GeckoDriverManager

        cls.driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))
        
        
--------------------------------------------------------------
Driver
--------------------------------------------------------------

    driver.get()
    driver.quit()

    driver.maximize_window()

    driver.find_element()   <<<<<<<<<<<< Seletores
    
    driver.implicitly_wait(10)
"""


"""
-------------------------------------------------------------
Locators
-------------------------------------------------------------
Seleccionar elementos de la pag web para interactuar con ellos.
Seleccionar un elemento especifico, seleccionar varios, seleccionar varios y luego hacerles un ciclo for, etc...
Requiere la importacion de By

Tradicional locators:
    Identifican precisamente un elemento
    Id / Name / class / XPATH / CSS selector / Link Text / PartialLinkText

    Codigo:
        driver.find_element(By.ABC, "xyz")
        
                           (By.ID, "search")      
                           (By.NAME, "q")
                           (By.CLASS_NAME, "input-text")  |%|  (By.CLASS_NAME, "search-button")
                           (By.TAG_NAME, "img")
                           (By.XPATH, "//*[@id='top']/body/div/div[2]/div[2]/ul/li[4]/a/img")
                           (By.CSS_SELECTOR, "div.header-minicart span.icon")  |%|  (By.CSS_SELECTOR,"#fruits .tomatoes")
Relative Locators:
    Cuando un elemento no es facilmente identificable, se puede apoyar en otros que si lo son:
    Above / Below / Left of / Right of / Near / Chain of multiples relative locators
    
    Codigo:
        locate_with(By.TAG_NAME, "input").above({By.ID: "password"})
    
                   (By.TRADICIONAL_LOC)  .below({By.ID: "email"})
                                         .to_left_of({By.ID: "submit"})
                                         .to_right_of({By.ID: "cancel"})
                                         .near({By.ID: "lbl-email"})
        
        locate_with(By.TAG_NAME, "button").below({By.ID: "email"}).to_right_of({By.ID: "cancel"})
"""

from selenium.webdriver.common.by import By

#Tradicional locator
def test_search_text_field(self):
    search_field = self.driver.find_element(By.ID, "search")

#Relative locator (multiple)    
submit_button = locate_with(By.TAG_NAME, "button").below({By.ID: "email"}).to_right_of({By.ID: "cancel"})
    

"""
-------------------------------------------------------------
Interactions     https://www.selenium.dev/documentation/webdriver/elements/interactions/
-------------------------------------------------------------
Instrucciones para manipura e interactuar

5 basicos:
    click       (to any element)
    send keys   (text fields and content editable elements)
    clear       (text fields and content editable elements)
    submit      (send form elements)
    select      ()



"""




    
"""
-------------------------------------------------------------
Assertions    (valdacion)
-------------------------------------------------------------
Validar que un valor en la ejecucion del test sea correcto
Si falso = Test se para
Si Verdadero = Test continua

"""

"""
-------------------------------------------------------------
waits     
-------------------------------------------------------------

Implicit wait
Explicit wait

"""