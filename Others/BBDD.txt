

Diseno de Base de Datos
Instalacion MySQL
Lenguaje SQL




RDB (relational database)

RDBMS (Relational DataBase Management System) Sistema Manejador de Bases de datos relacionales.
Schemas (BBDD)
Repositorio de datos (BBDD)

Entinty	(Entidad, tabla, table, objeto que posee atributos)

SQL (Structured Query Language)
NoSQL (Structured Query Language)

CRUD (CREATE, READ, UPDATE, DELETE)



BBDD estan conformadas por:
 	Tablas/entidades.
Tablas estan conformadas por:
	Columns (Campos, Atributos)
	Row (filas/registros/record)
Conector
	Necesarrio para que un programa/Pc se conecte a una BBDD (un servidor de bases de datos).




/////////////////////////////////////////////////////////////////////////////////////////////////////
		Diseno de Base de Datos
/////////////////////////////////////////////////////////////////////////////////////////////////////
		
Pasos para el diseno de la BD, importante para el desarrollo Backend.
	1o Entity–relationship model
	2o Normalization 
	3o Physical Diagrams



	Data Modeling
	-Conceptual and Logical Diagrams
	-Physical Diagrams

--------------------------------------------------------------------------
Entity–relationship model (ER model)
--------------------------------------------------------------------------
Provides a graphical view of structure of an information system, helps to identify the principal entities, their attributes, and the relationships between them. 



Entity			Objeto. Posee atributos. Se escriben en Plural (Convencion)
Attribute		Propiedades de Entidad
Relationships		Union entre entidades. Son siempre verbos (convencion).
Cardinalities		En una relationship Cuántos de un lado pertenecen a cuántos del otro lado. (1:1 1:N N:N)


		


Tipes Entity:
	Fuertes: Existen por sí solas. 
	Débiles: No pueden existir sin una entidad fuerte 
	    Por identidad:  se diferencian entre sí solo por la clave de su identidad fuerte.
	    Por existencia: se les asigna una clave propia.
Tipes Attribute:
	Llave: Identifican a la entidad y no se repiten.
		Naturales: son inherentes al objeto (como No. de serie)
		Clave artificial: Se asigna.
	Compuestos:  desprenden otros atributos.
	Derivados: Se derivan de otro atributo (fecha Nacimiento => Edad)
	Multivaluados: Contienen varios valores ( hijos => Nombre de cada uno, Etiquetas=> Las etiquetas)



	Chen's notation
		Entity			Rectangulo
		Attribute		Ovalo
		Relationships		Rombo. Linea une a Entities.
		Cardinalities	        (1:1 1:N N:N)

		Weak entity		Doble Rectangulo
		Key attibute		Ovalo, Palabra subrayada
		Derived attribute	Ovalo punteado
		Multivalue attribute	Doble ovalo
		
		CARDINALIDAD: 
		Linea recta
		Linea punteada		Opcional, puede o no haber relacion. 1:0 algunos dicen que no existe y realmente es 1:1 opcional
		Linea perpendicular 	Ese lado tiene relacion a 1
		Linea perpendicular 	Ese lado exclusivamente tiene relacion a 1 
		Linea final triple 	Ese lado union multiple
		Circulo 		Algunos dicen no existente.Ese lado relacion 0 o posibilidad de 0.





--------------------------------------------------------------------------
Physical Diagram
--------------------------------------------------------------------------
A physical data diagram provides a graphical view of your database structure, and helps you analyze its TABLES (including their columns, indexes, and triggers), views, and procedures, and the references between them.

En Entity incluira nombre y englobara sus atributos los cuales incluiran los tipo de datos especificando numeros, y su constraints.
Tendra sus relaciones.


Tipos de datos: 
	Texto: 			CHAR(n), VARCHAR(n), TEXT
	Números: 		INTEGER, BIGINT, SMALLINT, DECIMAL(n,s), NUMERIC(n,s)
	Fecha/hora: 		DATE, TIME, DATETIME, TIMESTAMP
	Lógicos: 		BOOLEAN


	CHAR(n)			String. No. de caracteres especifico (EFICIENTE memoria) 
	VARCHAR(n)		Texto. Hasta 255 letras.
	TEXT			Texto. No limite.
    	
	INTEGER			Numero (sin decimal).
	BIGINT			Para numero grandes
	SMALLINT		Para numeros pequenos (<99)(EFICIENTE)
	DECIMAL(n,s)		Numero con decimal (n =cantidad numeros, s =Cantidad de decimales)
	NUMERIC(n,s)		;;;;;;;;;;;;;
	
	DATE			Ano-mes-dia
	TIME			La hora
	DATETIME		Fecha y hora (1970 a 2038)
	TIMESTAMP		Fecha y hora (1 a 9999)
	
	BOOLEAN			1 o 0 (True, False)
	
	
Constraints 				(Restricciones a los datos)
	NOT NULL (NN)				No permite valores nulos.
	UNIQUE					Valor unico en la columna.
	PRIMARY KEY (PK)		Identifica entity. NOT NULL y UNIQUE.
	FOREIGN KEY (FK)		Identifica de manera única una tupla en otra tabla. (Relacion entre tablas, algo de una viene de otra)
	CHECK					Especificar condiciones de valor a aceptar.  CHEK(IN("opcion1","opcion2"))
	DEFAULT					Coloca un valor por defecto cuando no hay un valor especificado.
	INDEX					Permitir búsquedas más rápidas. DESVENTAJA: cada vez mas lento el ingreso de nuevo elemento (tiene que repasar todos los index previos para definir uno nuevo 0n) 


PASO 2: Inclusion de Foreing Keys
Con las Entities definidas, sus atributos definidos con el tipo de datos y sus constrains, se debe de graficar las relaciones.
Segun la relaciones y su cardinalidad se debe agregar como Foreing Keys la ID de una Entity dentro de la otra. Esto Creara la relacion en la BD. (Si alguien hizo algo, tendra su id incrustado y podremos saber quien hizo que en un Blog).

    Cardinalidad:			Foreing Key
	Relacion 1 a 1:		Agregar Foreing Key a cualquier Entity (es indistinto)
	Relacion 1 a N:         Agregar como Foreing key el id_Entinty de 1, al Entity multiple N. ("id de 1 en Muchos")
					ej. Usuario -|---< Comentario. A Entinty Comentario agregar id_Usuario, asi logramos identificar en la BD facilmente 
	Relacion N a N:		Caso especial. Romper relacion N:N creando tabla intermedia (Pivote). Esta tabla tendra las 2 ID de las 2 Entitys como FK






----------------------------------------------------------------------------------------
Normalization
----------------------------------------------------------------------------------------
Normalizacion es Aplicar "reglas de normalizacion" a una base de datos (BD relacional (Osea que tenga tablas)). 
Debe hacerse al disenar una base de datos (grl posterior a conocer Data Modeling). Si se hace despues (porque la BD escalo) es tedioso y engorroso. 

Funciones:  
	-Minimizar redudancia de datos. (Cada tabla tiene lo indispensable y no repite datos de otra tabla o en si misma)
	-BD Agil de actualizar. (Mas escalable, Modificar un dato significa solo agregarlo en una tabla y No ir a modificar mismo dato en multiples tablas)
	-Proteger la integridad de datos. (borrar un elemento no afecta a otro)

Formas:
    1a forma normal (1FN): Atributos atómicos (Sin campos repetidos)
    2a forma normal (2FN): Ademas cada campo de la tabla debe depender de una clave única.
    3a forma normal (3FN): Ademas los campos que NO son clave, NO deben tener dependencias.
    4a forma normal (4FN): Ademas campos multivaluados se identifican por una clave única.



1a forma normal (1FN): Atributos atómicos. Single value.
	Cada columna debe ser indivisible. 
	    Ejemplo: Nombre ==> Nombre, Primer Apellido, Segundo Apellido.
	    Ejemplo: Col Cerveza: Corona-Mexico/ Saporo-japon / Erdinger-Alemania ===> Col Pais, Col Marca.
	Columnas de tabla no variantes. 
	    Si quiero agregar nueva opcion, debe agregarse dentro de una columna y no requiero crear columna extra. 
	    Ejemplo: col1 - Lata 300ml, col2- botella 500ml ==> (Nueva tabla) Presentacion: lata 300 / botella 500ml / Botellon 2litros/ Minilata 100ml.
	

2a forma normal (2FN): Ademas cada campo de la tabla debe depender de una clave única.
	Debe haber Primary Key. 
		Agregar una clave Unica e irrepetible.   
	Todas las columnas deben depender de ese primary key. No hay campos repetibles.
		Eliminar todos los campos que no dependan de la clave. 
		creando otras tablas extras con los campos quitados dandoles su propias primary keys.
		
3a forma normal (3FN): Ademas los campos que NO son clave, NO deben tener dependencias.
	No dependencia funcional entre dos campos.  Si modifico una columna de una tabla, no requiero modificar otra columna.
	    Ejemplo: 1 factura 100, 
					
4a forma normal (4FN): Ademas campos multivaluados se identifican por una clave única.
	Va a ver casos que un elemeto en una tabla, tiene 2 o mas valores de otra tabla. Tabla alumno, Tabla materia.
	Crear una tabla que reune primary key de las tablas y ofrece propia primary key por cada opcion.
		Ejemplo Persona: 1 y Materias: 1/2/3 ==> id_1: Persona1, materia2.  id2: Persona 1, materia 3.
		
		
Romper relacion muchos a muchos
----------------------------------
Crear una tabla Pivote
Contendran los id de de las 2 entidades relacionadas como FK (o el num de entidades que existan)
	PrimaryKey(PK): Sera una PK compuesta. Las id seran tanto FK como PK, asi que las dos PK deben de conicidir

		ej
		----------------------------------
		POST N >|--------|< Etiquetas
		
		Tabla Pivote POST_Etiquetas
			post_id 		INTERGER(FK, PK)
			Etiquetas_id	INTERGER(FK, PK)
		




/////////////////////////////////////////////////////////////////////////////////////////////////////
				Instalacion MySQL
/////////////////////////////////////////////////////////////////////////////////////////////////////

	1 Instalacion-------------------
		sudo apt update
		sudo apt install mysql-server
		mysql --version								Know mysql version
		sudo mysql                            		Open mysql in terminal
		exit;										Close mysql

	2 workbench---------------------
			https://www.mysql.com/products/workbench/
			sudo dpkg -i archivo.deb
			sudo apt update 
			
		or 
			sudo apt update
			sudo apt install mysql-workbench

	3 Errores---------------------
		
		\\\\\\\\\\\\\\SI error de copatibilidad con ‘‘libpython2.7’’:\\\\\\\\\\\\\\\\\\
			sudo apt --fix-broken install
		
		
		\\\\\\\\Access Denied for User Root Error
		0. Cambiar password para el usuario root. Tambien coloca meto de autentificacion tipo mysql_native_password.
			sudo mysql -u root -p
			ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Poner password';
			exit;
			service mysql restart

		
		1. set root user to mysql_native_password

			sudo mysql -u root -p                  

			USE mysql;
			SELECT User, Host, plugin FROM mysql.user;
			UPDATE user SET plugin='mysql_native_password' WHERE User='root';
			FLUSH PRIVILEGES;
			exit;

			service mysql restart

		2. Add new db_user with you system_user(recommended)
			sudo mysql -u root 
			USE mysql;
			CREATE USER 'YOUR_SYSTEM_USER'@'localhost' IDENTIFIED BY '';
			GRANT ALL PRIVILEGES ON * . * TO 'YOUR_SYSTEM_USER'@'localhost';
			UPDATE user SET plugin='auth_socket' WHERE User='YOUR_SYSTEM_USER';
			FLUSH PRIVILEGES;
			exit;
			service mysql restart
			Remember that if you use option #2 you'll have to connect to mysql as your system username (mysql -u YOUR_SYSTEM_USER)


			
/////////////////////////////////////////////////////////////////////////////////////////////////////
				Lenguaje SQL
/////////////////////////////////////////////////////////////////////////////////////////////////////

Tiene  sublenguajes

	DDL 		(Data Definition Language)			Creacion y modificacion DB
				CREATE, ALTER, DROP, TRUNCATE
	DML		(Data Manipulation Language)			Manipulacion y query DB
				SELECT, UPDATE, INSERT, DELECT
	DCL		(Data Control Language) 			Seguridad DB
				GRANT, REVOKE
	TCL 		(Transaction Control Language) 			Gestion cambios de DB
				COMMIT, ROLLBACK, SAVEPOINT


Comandos
	CREATE, ALTER, DROP, TRUNCATE
	SELECT, UPDATE, INSERT, DELECT
	GRANT, REVOKE
	COMMIT, ROLLBACK, SAVEPOINT
Clausulas
	FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT  
		FROM
			LEFT JOIN, RIGHT JOIN, INNER JOIN
		WHERE 
			<  >  =  >= <= <> !=
			BETWEEN, LIKE, IN, NOT IN
			AND, OR , NOT, ALL, ANY, IS NULL, IS NOT NULL, EXIST
			YEAR(), MONTH(), MONTHNAME()
		   ===>>Nested Query
		ORDER BY   
			ASC  DESC

	+    -    *    /
	AVG(), COUNT(), SUM(), MAX(), MIN(), ROUND(), TRUNCATE
	NOW(), DATEDIFF(), GROUP_CONCAT(), Date_format(), Concat()
	AS
	DISTINCT, DISTINCTROW
	UNION, UNION ALL
	


Commands
------------------------
CREATE DATABASE 			Crea una BBDD
CREATE SCHEMA 				Crea una BBDD
CREATE TABLE				Crear una Entidad/Tabla dentro de la BBDD
					VARCHAR(), INTEGER 
					PRIMARY KEY,  AUTOINCREMENT, NULL, UNIQUE,
CREATE VIEW 				Crea una vista. Tabla derivada de otras que muestra nuestra query. Se mantienen en Memoria. v_ Convension, identifica tabla de una view.
					
USE DATABASE 				Establecera la BBDD que se estara manipulado
 						
ALTER TABLE				Inicia edicion de la tabla
	ADD 					Agregar columna
	ALTER COLUMN				Modificar columna
	DROP COLUMN				BORRAR

DROP 					ELIMINAR los especificado
						   

INSERT					Agrega Registro (fila)
					
					
UPDATE					Modifica campo de registro especificado
	SET					Especifica el campo y el valor que tendra
	WHERE					Especifica en donde se modifica. Condiciones.	

DELETE					ELIMINAR registros
	FROM					Especifica la tabla 
	WHERE					Especifica que se elimina. Condiciones. (SIN WHERE ELIMINA TODA LA TABLA)

SELECT					Trae informacion seleccionada de BD. Selecciona columns
	FROM					Especifica tabla
	WHERE					Especifica condicion




1		CREATE
1.1	CREATE DATABASE BD_Name;
1.2	CREATE SCHEMA BD_Name;
1.3	CREATE TABLE Entity_name (Column Tipo(N) Constrains,); 		ej. CREATE TABLE personas (persona_id INTERGER PRIMARY KEY AUTOINCREMENT, last_name varchar(40)...);
1.4	CREATE VIEW v_ViewName SELECT xxx FROM xxx WHERE xxx;
2		USE
2.1	USE DATABASE BD_Name;
3 		ALTER TABLE
3.1	ALTER TABLE Entity_name ADD Column Tipo(N) Constrains;
3.2	ALTER TABLE Entity_name ALTER COLUMN Column New_Tipo(N) Constrains;
3.3	ALTER TABLE Entity_name DROP COLUMN Column;
4		DROP 
4.1	DROP TABLE table_Name;
4.2	DROP DATABASE BD_Name;
5		INSERT
5.1	INSERT INTO tabla(columnx,columny,columnz) VALUES ('valuex', 'valuey', 'valuez');
5.2	INSERT INTO tabla(columnx,columny,columnz) VALUES ('valuex', 'valuey', 'valuez')('valuex2', 'valuey2', 'valuez2')('valuex3', 'valuey3', 'valuez3');
5.3	INSERT INTO `My_first_BBDD`.`users` (`nickname`, `email`, `telephone`, `first_name`, `last_name`) VALUES ('pchan', 'abc@mail.com', '080', 'pepe', 'pecas');
5.31  	insert into users (nickname, email, telephone, first_name, last_name) values ('ozqchan', 'oz91ail.com', '777', 'pepe', 'pecas');
6		UPDATE
6.1	UPDATE tabla SET column1 ='New_value1', column2 ='New_value2'; 
6.2	UPDATE tabla SET column1 ='New_value1', column2 ='New_value2'; WHERE column = valueCondition;
7		DELETE
7.1	DELETE FROM table WHERE column = valueCondition;
7.2	DELETE FROM table;  		
8		SELECT
8.1	SELECT column FROM table;  
8.2	SELECT    *   FROM table; 
8.3	SELECT column FROM table WHERE column= valueCondition;
9
10



Foreing keys (FK)
	ON UPDATE		Accion al actualizarse referenciada con la Foreing key
		NO ACTION	No hace nada. Tabla pierde la relacion.
		SET NULL	Coloca nulo. Y tabla pierde la relacion.
		CASCADE		Si key tabla externa se modifica, tambien FK se modifica
		RESTRICT	No permitirá cambio id de tabla externa hasta que no sean actualizados antes todos las tablas relacionadas

	ON DELETE		Accion al Borrarse tabla referenciada con la Foreing key
		NO ACTION	No hace nada
		SET NULL	Coloca nulo. Y tabla pierde la relacion.
		CASCADE		Si tabla externa se borra, esta entity tmb se borra
		RESTRICT	No permitira borrar tabla externa, hasta que borre primero tabla relacionadas primero.



Reverse Engineer		A partir de BD ya hecha, muestra el diagrama fisico de esta. Ayuda a comprender una BD de otra persona.



-----------------------------------------------
	QUERY
-----------------------------------------------
 INT = Sin comillas   VARCHART = Comillas  DATETIME = Comillas '2020-01-01'	

 Basico: SELECT y FROM 
 Comun: SELECT, FROM, WHERE
 Extendido: SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT

	-SELECT 	Column.  Lo que quieres mostrar
	
				AS 
				COUNT(), SUM(), MAX(), MIN(), AVG(), ROUND()
				YEAR(), MONTH(), MONTHNAME()
				NOW(), DATEDIFF(), GROUP_CONCAT()
				
	-FROM 		Table.	De dónde voy a tomar los datos
	
				LEFT JOIN, RIGHT JOIN, INNER JOIN
			
	-WHERE 		Column/value.	Los filtros de los datos que quieres mostrar
	
				<  >  =  >= <= <> !=			     
				LIKE, BETWEEN, IN, NOT IN
				AND, OR , NOT, ALL, ANY, IS NULL, IS NOT NULL, EXIST
				YEAR(), MONTH(), MONTHNAME()
				Nested Queries
				
	-GROUP BY	Column.	Los rubros por los que me interesa agrupar la información
	
	-HAVING		Column/value.	Los filtros que quiero que mis datos agrupados tengan
	
	-ORDER BY	Column.	El orden en que quiero presentar mi información
	
				ASC  DESC
				
	-LIMIT		Value.	Limite de cantidad de resultados para mostrar en el query
	
------------		-----------------------------------------------------------	
AS			Renombra columna en la query. Colocarse posterior a columna a renombrar. 
				SELECT column AS NewName, column2 AS NewName2 FROM table;
COUNT()			Genera columna. Cuenta numero de registros. Regresa solo un Dato. 
				SELECT COUNT(column);
				SELECT COUNT(column) ThisColumnName;
AVG() 			Genera columna. Calcula el promedio.
SUM() 			Genera columna. Suma los valores.
MAX() 			Genera columna. El maximo.
MIN() 			Genera columna. El mínimo. 
ROUND()			Genera columna. Redondea cantidad a decimales especificados
				ROUND(column, #decimales)
NOW()			Genera columna con el día y la hora actuales al momento de hacer la Query.
				SELECT NOW() 
				SELECT NOW() AS today_date
DATEDIFF()		Genera columna con la diferencia de dos fechas especificadas.
				SELECT birth_date, NOW(), DATEDIFF(NOW(), birth_date) FROM table;
				SELECT birth_date, NOW(), DATEDIFF(NOW(), birth_date) AS age FROM table;
GROUP_CONCAT()		Genera columna que agrupa en un solo campo de una columna (concatena con comas), varios resultados/campos de una columna.
				SELECT column, GROUP_CONCAT(column) FROM xxx
				Ej. SELECT titulo, GROUP_CONCAT(etiqueta) FROM xxx GROUP BY titulo_id ==>    Titulo1 | Etiqueta1, Etiqueta4, Etiqueta 18
LEFT JOIN  ON		Datos de tabla A, esten o no en B	
				SELECT * FROM Table1 LEFT JOIN Table2 ON table1.column = Tabla2.column;	 	ON Colocar la relacion.  key(tabla1) = Foreing key (tabla2)	
				SELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.table1_id; 		
			Datos de tabla A, sin incluir los que tambien esten en B	
				SELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.table1_id WHERE table2.table1_id IS NULL;
RIGHT JOIN  ON		Datos de tabla B, esten o no en A  // Datos de tabla B, sin incluir los que tambien esten en A
INNER JOIN  ON		Datos que incluidos en A y en B (interseccion)		
OUTER JOIN  ON		Datos que no incluyen interseccion (NO es SQL estandar y algunos no lo reconocen)

UNION			Regresa tabla con la union de dos tablas. Preferentemente diferentes Entitys con similares columnas para evitar NULLS. Usado para simular OUTER JOIN
				SELECT xxx 	UNION 	SELECT xxx;
				SELECT x LEFT JOIN XXX 		UNION 		SELECT x RIGHT JOIN;
LIKE			Regresa registros que tenga en columna especificada la condicion parcial escrita. Usa % para indicar que puede haber lo que sea antes/despues de la condicion escrita.
				'Condicion_Parcial%'	Inicia con
				'%Condicion_Parcial' 	Finaliza con
				'%Condicion_Parcial%'	Tiene entremedio a
				SELECT * FROM table WHERE column LIKE '%Condicion_Parcial%';
BETWEEN  AND		Regresa registros con condicion de una columna dentro de rango.
				SELECT * FROM table WHERE column BETWEEN '2010-01-01' AND '2020-01-01';
IN			Regresa registros incluidos dentro de...
NOT IN			Regresa registros NO incluidos dentro de... 
				SELECT * FROM table WHERE YEAR(column)= '2020';
				SELECT * FROM table WHERE YEAR(column) BETWEEN '2020' AND '2025';
YEAR()			Regresa registros que cumplen condicion ano
MONTH()			Regresa registros que cumplen condicion mes
				SELECT * FROM table WHERE MONTH(column)= '04';
MONTHNAME()		Igual a MONTH() pero por nombre de mes en ingles (January, May, October)
IS NULL			Regresa registros con columna con campo nulo
				SELECT * FROM table WHERE column IS NULL;
				
GROUP BY		Regresa resultado reagrupando las filas segun opciones de una columna especificada.  (ej: Agrupado en anos) 
				SELECT YEAR(date) AS year, COUNT(*) FROM (blogs) GROUP BY year;  --> ano, conteo de registros ese ano
				SELECT user_country, MONTHNAME(post_date) AS post_month, COUNT(*) AS post_number FROM blogs GROUP BY user_country, post_month; ---> Regresa row con Pais / mes / numero de post de ese pais en ese mes 

HAVING			Lo mismo que WHERE, solo que en el orden de las acciones WHERE se ejecuta antes de GROUP BY y HAVING se ejecuta despues.
			Se puede utilizar cuando condicion de busqueda es el resultado de lo obtenido de GROUP BY.
				Ej. X COUNT(*) AS month_post WHERE month_post >2 GROUP BY post_month  	Ejecucion: 1o WHERE, 2o GROUP BY<->COUNT()
				Ej. O COUNT(*) AS month_post GROUP BY post_month HAVING month_post >2 	Ejecucion: 1o GROUP BY<->COUNT() 2o HAVING

ORDER BY  		Regresa ordenado segun columna especificada. (Default-Ascendente, alfabeticamente, de menor a MAYOR)
				SELECT xxx ORDER BY column DESC;
ORDER BY  DESC		Regresa	ordenado Descendentemente segun columna especificada (De MAYOR a menor)			
				SELECT xxx ORDER BY column DESC;

LIMIT			Especifica cantidad limite de resultados a mostrar.
				SELECT xxx LIMIT 200;
				
				
-----------------------------------------------
	NESTED QUERIES
-----------------------------------------------
 Un SELECT (subquery) dentro de otro QUERY. 
 No escalable: O(n^2)
			SELECT xxx (SELECTxxx) xxx
				
	Dentro de FROM: Funcionara como tabla sobre la cual se realiza la query
		SELECT * FROM Table (SELECT * FROM Table); 
		SELECT new_table.date FROM Table (SELECT date FROM Table) AS new_table WHERE xxx;
		
	Dentro de WHERE: que funcionara como Criterio de busqueda de la QUERY superior.
		SELECT * FROM Table WHERE column <= (SELECT AVG(column) FROM Table);
		SELECT * FROM Table WHERE column NOT IN (SELECT xxx);


/////////////////////////////////////////////////////////////////////////////////////////////////////
			MySQL Workbench
/////////////////////////////////////////////////////////////////////////////////////////////////////

Ingenieria reversa		A partir de BD ya hecha, muestra el diagrama fisico de esta. Ayuda a comprender una BD de otra persona.
			
				1 Database
				2 Reverse Engineer
				3 Seleccion Conexion. Continue
				4 Continue (Se conecta)
				5 Selecion de BD (schema). Continue
				6 (modificar si especificar objetos). Execute
				7 Close
				

