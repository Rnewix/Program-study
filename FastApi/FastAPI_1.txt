https://fastapi.tiangolo.com/
https://fastapi.tiangolo.com/tutorial/

Definiciones
----------------------------
	JSON		Mensaje  usado por HTTP como medio de comunicacion. Es un diccionario.
	Path		Also called Route or Endpoint. last part of the URL. Todo aquello que vaya después de nuestro Dominio URL
	Operation	HTTP "methods"
	OPEN API 	Especificación que define como describir, crear y visualzar API’s. Permite reconocer si una API está definida adecuadamente
	Swagger		Software que verifica nuestra API (Segun OPEN API). Documentación interactiva/Interactive API documentation.
	ReDoc 		Alternativa de Swagger.
	Request: 	Peticion del cliente al servidor.
	Response: 	Respuesta del servidor al cliente.
	Entidad     Cualquier objeto 
	Modelo      Molde/clase para crear objeto. Representación en codigo de un objeto(entidad). Requiere importar framework Pydantic (clase BaseModel)
	Pydantic	Framework para crear modelos. Se requiere en FastAPI

	Parameters
	.	Path parameter: Variables dentro del Path, que modificara el url de maneda dinamica. Ingreso Obligatorio. Pasara a la funcion como argumento.
						Estructura:  '{}'					 					
	.	Query Parameters: Parametros opcional al final del URL. ingreso no obligatorio.
						Estructura:  '/url?paramet=value'  // 	'/url?par1=val1&par2=val2&...' 
	.	Query Parameters1:  Parametros dentro de funcion y no parte del path. (no descrita en Path en decorador)	


	Response: 		Respuesta del servidor/API al cliente. ALWAYS sended.
	Response body:	Continene el body de un HTTP response. Realizada con GET. Contiene la info de la consulta o solicitud de informacion
	Request: 		Peticion del cliente al servidor/API. Not always needed.
	Request Body: 	Contiene el body de una HTTP request. Realizada con POST (principalmente). Contiene la info de la peticion. (Crear modelos / modificar o eliminar)
	

Ecosistema para FastAPI
--------------------------------------------
	Uvicorn: 	librería de Python que funciona de servidor (cualquier cpu se convierta en un servidor)
	Starlette: 	framework de desarrollo web de bajo nivel para aplicaciones, FastAPI lo simplifica.
	Pydantic: 	framework (similar a pandas), usado para cerar modelos los cuales aprovechara FastAPI




						//////////////////===============FastAPI===============////////////////////


-------------------------------------------------------------------------------
First Steps
------------------------------------------------------------------------------
    1 Crear Carpeta projecto
    2 Inicializar y activar Git y Venv
    3 Instalar FastApi y Servidor	
    4 Crear file/modulo	main.py
				----------------------
    5 Desarrollar la API
    	5.1 Importar FastAPI
    	5.2 Create an app instance
    	5.3 Write a path operation decorator (@app.get("/"))
    	5.4 Write a path operation function (async def root(): ... )
    6 Run code 
    
    
.	    |-----------------------------------------------------------------------------------------------------------
.		|		Basic estructure
.    	|-----------------------------------------------------------------------------------------------------------
.    	|  	
.    	| 			from fastapi import FastAPI						Class FastAPI imported 
.    	|						
.    	|			app = FastAPI()									Var que instancia(objeto) de FastAPI (clase). Sera nuestra APP de FastAPI.  
.    	|				
.    	|			@app.get("/")									Path operation Decorator
.    	|			async def root():								Path operation Function
.    	|				return {"message": "Hello World"}			Respuesta {JSON}
.    	|
.    	-----------------------------------------------------------------------------------------------------------
.
.
.	------------------------------------------------------------------------------
.			Install and Run  
.   	-------------------------------
.
.	pip install fastapi server1						Instalar FastAPI y el servidor a usar			
.   pip install fastapi uvicorn						Instalar FastAPI y el servidor Uvicorn
.   pip install "fastapi[all]"						Instalar FastAPI y el servidor default (Uvicorn)
.
.	
.	uvicorn module:appname --reload 				Correr servidor. (Uvicorn)    		ej. uvicorn main:my_app --reload
.		        										--reload 	make the server restart after code changes. Only use for development.
.	CTrl + C										Cerrar servidor.											
.														
.	http://127.0.0.1:8000							Ver respuesta del server. (JSON response) (after activation)
.	http://127.0.0.1:8000/docs						Ingresar a Interactive API documentation (by Swagger)  	->docs
.	http://127.0.0.1:8000/redoc						Ingresar a Interactive API documentation (by ReDoc) 	-redoc
.	
.
.	------------------------------------------------------------------------------
.
.	@app.get("/URL")								Decorador (Path operation Decorator) que indica a FastAPI que la funcion debajo manejara las solicitudes y metodo HTTP (operation) con el quelo hara.
.														.get()		Read data.
.														.post()		Create data.
.														.put()		Update data.
.														.delete()	Delete data.
.							
.  	async def func():								Funcion Asincronica (Path operation Function).  
.	    return {"" : ""}							Return un JSON (Un diccionario en Python). 		Cualquier cosa sera automaticamente convertida a JSON
.	    
.	def func(var1, var2:):     						Funcion con Parametros 
.	def func(var1: type, var2: type):    	 		Funcion con Parametros con Tipado estatico (no requiere ->)
.
.	
.	------------------------------------------------------------------------------
.			Variables y parametros.  
.   	-------------------------------
.
.	@app.get('/url/{var}')							Path parameter.   { } Variable definida dentro del path. URL variable.
.	@app.get('/url/{var}/url/{var}')				Path parameter multiples.
.
.	@app.get('/url?paramet=value')					Query Parameters.                 ?= query begin
.	@app.get('/url?par1=value1&par2=value2')		Query Parameters multiples.       &= query separator
.
.
.	@app.get("/URL")								
.	def func(par1: type, par2: type):				Query Parameters. Variables con tipado estatico.
.
.	def func(par1: type):							Query Parameters. Variable de funcion obligatorio 	(not declare any default value-> query parameter required)
.	
.	def func(par1: type = default_value):  			Query Parameters. Variable de funcion Opcional con valor default
.	
.	def func(par1: type = None):					Query Parameters. Variable de funcion opcional con valor None 	 (Python>3.9)
.															(python >3.5)	-from typing import optional
.																			-def root(par1: optional[type] = None:
.															(python >3.10)	-from typing import Union
.																			-def root(par1: type | None = None:
.															(python <3.10) 	-from typing import Union
.																			-def root(par1: Union[type, None] = None:
.	
				
. 	...												Especificar "explicitamente" que valor de variable/parametro/atributo es requerido/OBLIGATORIO 
.															Normally, when something is required, you can simply omit a default parameter
.
.
.	from fastapi import  Path						Especificar que parametro es Path parameter. OBLIGATORIO. Gana funcionalidades de la Path.
.	@app.get('/url/{var1}')
.	def func(var1 : type = Path()): 	
.
.	from fastapi import Query                      	Especificar que parametro es Query Parameters. Response body / GET. OPCIONAL. Gana funcionalidades de la Query. 
.	def func(var : type = Query()):              		   
.
.	from fastapi import Body						Especificar que parametro es Body parameter. Request Body / POST, PUT... Gana funcionalidades de la clase Body.
.	def func(var : type = Body()): 
.
.
.				Parameter Validation and Metadata.  
.   	--------------------------------------------------------
.
.	from fastapi import Path						Especificar Path parameter. 
.	var : type = Path(value, instruction) 				Agregar resticciones, validaciones y metadatos a los path parametros.  
.															@app.get('/url/{var1}')
.															def func(var1: int = Path(instruction)):
.	from fastapi import Query                      	Especificar Query Parameters. 
.	var : type = Query(value, instruction)         		Agregar resticciones, validaciones y metadatos a los query parametros.    
.	
.		   												=====================INSTRUCTIONS======================
.														...					Colocar Valor requerido "explicito" (called Ellipsis). Normally, when something is required, you can simply omit a default parameter. var: str = Query(default=...)
.														default=None		Colocar Valor Default explicto. None -> valor opcional
.		 													===Validation str====
.														max_length=50		Restringir longitud maxima 
.														min_length=3		Restringir longitud minima 
.														regex="reg_ex"		Restringir parametro con Expresion regular. Regular expression. Debe coincidir.
.	 														====Metadatos=====	
.														alias="alias1"		Create alias of parameter. When need to name with a NOT valid Python variable name. ej. var: str = Query(default=None, alias="item-query")
.														title = "title1" 	Agregar Metadato titulo. Visible en Documentación interactiva.
.														description="descr"	Agregar Metadato descripcion. Visible en Documentación interactiva.
.														deprecated=True		Indicar que variable ya es obsoleta (ya no la quieres). Se mostrara para que usuarios tomen medidas antes de borrarla.
.	 														===Validation Number===
.														gt=666				Greather than
.														ge=999				Greather or Equal
.														le=333				Less or Equal 
.	  													lt=000				Less than
.	
.
.													Validaciones de valores ingresados por el cliente.
.	from pydantic import Exotic_Type					1.- Importacion de Tipos de datos exóticos desde pydantic (https://pydantic-docs.helpmanual.io/usage/types/#pydantic-types)
.	var : Exotic_Type = None							2.- Ingresarlos como type (de tipado estatico)
.
.														================Tipos de datos exóticos de Pydantic===========================
.															HttpUrl 			Valida si una URL es valida 
.															FilePath 			Valida si la ruta ingresada es un archivo 	(c:/windows/system32/432.dll)
.															DirectoryPath		Valida si la ruta ingresada es un directorio (c:/windows/Desktop/Folder)
.															EmailStr			Valida si lo ingresado es un email 					( XYZ@email.com)
.																				Requiere instalacion: pip install pydantic[email]  ??? 
.																				Requiere instalacion: pip install email-validator  ???
.															PaymentCardNumber 	Valida si lo ingresado es un número de tarjeta
.															IPvAnyAdress 		Valida si lo ingresado es una dirección IP
.															NegativeInt 		Valida si lo ingresado es un número entero negativo
.															PositiveInt 		Valida si lo ingresado es un número entero positivo
.															NegativeFloat 		Valida si lo ingresado es un número negativo de tipo flotante
.															PositiveFloat 		Valida si lo ingresado es un número positivo de tipo flotante
.																etc.
.
.
.													Definir opciones validas de strings. Especificar y limitar conjunto de strings que seran opciones validas para una variable que acepta str. 
.	from enum import Enum							 	1.- Importa Enum. (viene modulo enum de python)
.	class Enum_str(Enum):								2.- Heredar de clase Enum
.		str1 = 'str1'									3.- Crear como atributos, los str que funcionaran como opciones disponibles
.		str2 = 'str2'									|
.		str3 = 'str3'									|		
.														|	
.		var : Enum_str = None							4.- Ingresar clase creada como Type de variable. Equivale tambien a type "str".
.		
.															Enum				checks that the value is a valid Enum instance
.															IntEnum				checks that the value is a valid IntEnum instance
.
.
.	------------------------------------------------------------------------------	
.			Model  
.   	-------------------------------
.
.	
.	from pydantic import BaseModel					Importacion de BaseModel de pydantic para crear modelos
.
.	class Model1(BaseModeL):						Creacion de modelo. Una clase que hereda de BaseModel.
.		atribute1 : type							Atributos con tipado estatico
.		atribute2 : type
.		opt_atrib1 : type = value					Atributos Opcionales, con tipado estatico
.
.	@app.post("/URL/"new_model")					Create Request: POST
.	def create_object(var_model: Model1):				Def para creacion de objeto a partir de un modelo. Query parameter -> var_model : Type -> Model1
.		return 
.
.
.				Model Validation and Metadata.  
.   	---------------------------------------------------
.	from pydantic import Field						Clase para validaciones en Modelos (similar a clases Body, Query y Path de fastapi)
.	class Model1(BaseModeL):							Mismas instrucciones  y validaciones que  Path  y Query. Ver arriba (==INSTRUCTIONS==) 
.		atrib1: type = Field(value, INSTRUCTIONS)
.		   												
.				
.
.	------------------------------------------------------------------------------	
.			Automatic examples 						Valores automaticos para Verificar con Interactive API documentation (by Swagger or ReDoc)
.   	-------------------------------			
.
.	var: type = Path(value, example= value) 		Valores automaticos para Path parameter.  
.															
.	var: type = Query(value, example= value)  		Valores automaticos para Query parameter. 
.
.
.	class Model1(BaseModeL):						Valores automaticos para request Body(modelos). 	
.		atrib1: type = Field(None, example= value)		Especificada directamente en el atributo.
.
.
.	class Model1(BaseModeL):						Valores automaticos para request Body(modelos).   
.	|	atrib1: type = Field(value)						Creacion subclase dentro del modelo que tiene todos los atributos y sus valores.
.	|	atrib2: type = Field(value)
.   |   
.	|	class Config:								
.	|	|	schema_extra = {
	|	|		"example" : {"atrib1": "value",	"atrib2": int}
.	|	|		}
.
.
.
.
.
.


.	------------------------------------------------------------------------------
.
.	var = object.dict()								Regresar 2 JSON unificados(regresar 2 Request body unficados). Poco Comun. 
.	var.update(object2.dict())							Unificar los 2 JSON antes de returnarlos (convertirlos en dicc)
.	return var


















	Estructura basica de modelo 
	---------------------------------------------
		#importaciones#
#Python
from enum import Enum

#Pydantic
from pydantic import BaseModel, Field, EmailStr

#FastAPI
from fastapi import FastAPI
from fastapi import Body, Path

app= FastAPI()

						 	
class Grade_Univ(Enum):							
    primer_grado = 'primer grado'									
    segundo_grado = 'segundo grado'
    tercer_grado = 'tercer grado'

class Student(BaseModel):
	student_id: int = Field(..., gt=0, le= 1000000) #, title= "Studen ID", description= "This ID is Unique for every student"
	apellido_paterno: str = Field(..., min_length=1, max_length=15)
	apellido_materno: str = Field(..., min_length=1, max_length=15)
	nombres: str = Field(..., min_length=1, max_length=20)
	grado_universitario: Grade_Univ = Field(...)
	calificacion_ingreso: float = Field(..., gt=60.00, le= 100.00)
	#email: EmailStr = Field(..., max_length=50)
	hobby: str = Field(default = None, max_length=30)	
	
	class Config:								
		schema_extra = {
                "example" : {
                    "student_id": 666,	
				    "apellido_paterno": "Roca", 
				    "apellido_materno": "Dono", 
				    "nombres": "Carlos", 
                    "grado_universitario": "tercer grado", 
                    "calificacion_ingreso": 97.55, 
                    #"email": "roca@gmail.com"
                    }
			    }

@app.get("/")									
async def root():								
    return {"message": "Hello World"}				

@app.get("/URL/estudiantes/{student_id}")
async def get_student(
	student_id: int = Path (...)
	):
	return {"message": "The student is..."}

@app.post("/URL/new_student")
def create_student(
	student: Student = Body(...)
	):
	return student