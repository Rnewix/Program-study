https://fastapi.tiangolo.com/
https://fastapi.tiangolo.com/tutorial/

Definiciones
----------------------------
	JSON		Mensaje  usado por HTTP como medio de comunicacion. Es un diccionario.
	Path		Also called Route or Endpoint. last part of the URL. Todo aquello que vaya después de nuestro Dominio URL
	Operation	HTTP "methods"
	OPEN API 	Especificación que define como describir, crear y visualzar API’s. Permite reconocer si una API está definida adecuadamente
	Swagger		Software que verifica nuestra API (Segun OPEN API). Documentación interactiva/Interactive API documentation.
	ReDoc 		Alternativa de Swagger.
	Request: 	Peticion del cliente al servidor.
	Response: 	Respuesta del servidor al cliente.
	Entidad     Cualquier objeto 
	Modelo      Molde/clase para crear objeto. Representación en codigo de un objeto(entidad). Requiere importar framework Pydantic (clase BaseModel)
	Pydantic	Framework para crear modelos. Se requiere en FastAPI

	Parameters:
	Path parameter: Variables dentro del Path, que modificara el url de maneda dinamica. Ingreso Obligatorio. Pasara a la funcion como argumento.
					Estructura:  '{}'					 					
	Query Parameters: Parametros opcional al final del URL. ingreso no obligatorio.
					Estructura:  '/url?paramet=value'  // 	'/url?par1=val1&par2=val2&...' 
	Query Parameters1:  Parametros dentro de funcion y no parte del path. (no descrita en Path en decorador)	

	Response: 		Respuesta del servidor/API al cliente. ALWAYS sended.
	Response body:	Continene el body de un HTTP response. Realizada con GET. Contiene la info de la consulta o solicitud de informacion
	Request: 		Peticion del cliente al servidor/API. Not always needed.
	Request Body: 	Contiene el body de una HTTP request. Realizada con POST (principalmente). Contiene la info de la peticion. (Crear modelos / modificar o eliminar)

	Response Model: Es parametro del path operation (decorator), regresa como respuesta (en lugar del modelo real) un modelo (response model) con atributos que determinamos seran mostrados.	
	Input model:	Deeds to be able to have a password.
	Output model:	Should not have a password.
	Database model: Would probably need to have a hashed password.



Ecosistema para FastAPI
--------------------------------------------
	Uvicorn: 	librería de Python que funciona de servidor (cualquier cpu se convierta en un servidor)
	Starlette: 	framework de desarrollo web de bajo nivel para aplicaciones, FastAPI lo simplifica.
	Pydantic: 	framework (similar a pandas), usado para cerar modelos los cuales aprovechara FastAPI




						//////////////////===============FastAPI===============////////////////////


-------------------------------------------------------------------------------
First Steps
------------------------------------------------------------------------------
    1 Crear Carpeta projecto
    2 Inicializar y activar Git y Venv
    3 Instalar FastApi y Servidor	
    4 Crear file/modulo	main.py
				----------------------
    5 Desarrollar la API
    	5.1 Importar FastAPI
    	5.2 Create an app instance
    	5.3 Write a path operation decorator (@app.get("/"))
    	5.4 Write a path operation function (async def root(): ... )
    6 Run code 
    
    
.	    |-----------------------------------------------------------------------------------------------------------
.		|		Basic estructure
.    	|-----------------------------------------------------------------------------------------------------------
.    	|  	
.    	| 			from fastapi import FastAPI						Class FastAPI imported 
.    	|						
.    	|			app = FastAPI()									Var que instancia(objeto) de FastAPI (clase). Sera nuestra APP de FastAPI.  
.    	|				
.    	|			@app.get("/")									Path operation Decorator
.    	|			async def func():								Path operation Function
.    	|				return {"message": "Hello World"}			Respuesta {JSON}
.    	|
.    	-----------------------------------------------------------------------------------------------------------
.
.
.	------------------------------------------------------------------------------
.			Install and Run  
.   -------------------------------
.
.	pip install fastapi server1							Instalar FastAPI y el servidor a usar			
.   pip install fastapi uvicorn							Instalar FastAPI y el servidor Uvicorn
.   pip install "fastapi[all]"							Instalar FastAPI y el servidor default (Uvicorn)
.
.	
.	uvicorn module:appname --reload 					Correr servidor. (Uvicorn)    		ej. uvicorn main:my_app --reload
.		        											--reload 	make the server restart after code changes. Only use for development.
.	CTrl + C											Cerrar servidor.											
.														
.	http://127.0.0.1:8000								Ver respuesta del server. (JSON response) (after activation)
.	http://127.0.0.1:8000/docs							Ingresar a Interactive API documentation (by Swagger)  	->docs
.	http://127.0.0.1:8000/redoc							Ingresar a Interactive API documentation (by ReDoc) 	-redoc
.	
.
.	------------------------------------------------------------------------------
.
.	@app.get("/URL")									Decorador (Path operation Decorator) que indica el path y le dice a FastAPI que la funcion debajo manejara las solicitudes y metodo HTTP (operation) con el quelo hara.
.															.get()		Read data.
.															.post()		Create data.
.															.put()		Update data.
.															.delete()	Delete data.
.														----------------------------
.															path= "/URL"						Especificar el path.
.															satus_code= status.HTTP_###_XXX		Definir un staus code (default >200). Requiere importar status. Ver abajo.
.															response_model=  Model_Out			Ver abajo. Response Model.

  	def func():											Funcion (Path operation Function).  
	    return {"" : ""}								Return un JSON (Un diccionario en Python). 		Cualquier cosa sera automaticamente convertida a JSON

  	async def func():									Especificar Funcion Asincronica   	    
	def func(var1, var2:):     							Funcion con Parametros 
	def func(var1: type, var2: type):    	 			Funcion con Parametros con Tipado estatico (no requiere ->)

	
	------------------------------------------------------------------------------
.			Variables y parametros.  
  	-------------------------------

	'{var}' 											Path parameter.  Variable dentro del path. URL variable.
.															@app.get('/url/{var}')		

	'{var}/{var}'										Path parameter.	Variables multiples dentro del path.
.															@app.get('/url/{var}/url/{var}')

	path='/url/'										Definir "explicitamente" el path. 						(Normamente no se usa, el primer parametro pasado sera el Path (URL)).
.															@app.get(path='/url/{var}')	

	'/url?param=value'									Query Parameters.                 ?= query begin
.															@app.get('/url?paramet=value')	
	
	&													Query Parameters multiples.       &= query separator
.															@app.get('/url?par1=value1&par2=value2')

	response_model=model_out							Crear response model. (Ver abajo en response model)
.															@app.get('/url', response_model=model_out)	
							
	status_code= ###									Especificar un status code.								(ver status code en http.txt)
.															@app.get('/url', status_code=200)	

	status_code= status.HTTP_###_Msg 					Especificar un status code. REQUIERE IMPORTACION		(ver status code en http.txt)
.															from fastapi import status
.															@app.get('/url', status_code=status.HTTP_200_OK)		
														
	param: type = value									Query Parameters. Variables con tipado estatico.
.															@app.get("/URL")								
.															def func(par1: type, par2: type):

	param: type											Query Parameters. Variable de funcion con valor obligatorio 	(not declare any default value-> query parameter required)
.															def func(par1: type):

	param: type = default_value			 				Query Parameters. Variable de funcion con valor Opcional (con valor default)
.															def func(par1: type = default_value):

	param: type = None									Query Parameters. Variable de funcion opcional con valor None 	 (Python>3.9)
.															def func(par1: type = None):
.															---------------------------------------------------------------
.																(python >3.5)	-from typing import optional
.																				-def root(par1: optional[type] = None:
.																(python >3.10)	-from typing import Union
.																				-def root(par1: type | None = None:
.																(python <3.10) 	-from typing import Union
.																				-def root(par1: Union[type, None] = None:

 	var : type = ...									Especificar "explicitamente" que valor de variable/parametro/atributo es requerido/OBLIGATORIO 
.															Normally, when something is required, you can simply omit a default parameter

									
	var1 : type = Clase()								Especificar clase de parametro.  REQUIERE IMPORTACION de la clase.
.															Clase de param		Tipo de entrada		
.															--------------		-----------------
.		Path()												-Path parameter. 		-URL y OBLIGATORIO. 
.																	from fastapi import Path														 
.																	@app.get('/url/{var1}')
.																	def func(var1 : type = Path(value)): 	
.		Query()												-Query parameter. 		-URL yOPCIONAL. 			Response body / GET.  
.																	from fastapi import Query                     	 	 
.																	def func(var : type = Query(value)):              		   
.		Body()												-Body parameter. 		-JSON.						Request Body / POST, PUT... 
.																	from fastapi import Body
.																	def func(var : type = Body(value)): 
.		Header()											-Header parameters. 	-Cabeceras HTTP 			(ver en Header)
.																	from fastapi import FastAPI, Header
.																	def func(var : type = Header(value)):
.		Cookie()											-Cookie parameters.		-Data from PC 				(ver en Cookies)
.																	from fastapi import Cookie
.																	def func(var : type = Cookie(value)):
.		Form()												-Formularios. 			-Data from front_End		REQUIERE install python-multipart (ver en formularios)
.																	from fastapi import Form 
.																	def func(var : type = Form(value)):
		File	   											-File parameters		-Files(imágenes, audio, vídeo, etc.)  
		
	------------------------------------------------------------------------------
.		Parameter Validation and Metadata.  		 	Todos iguales = Path, Query, Body, Header, Cookie, Form, Field.
  	------------------------------------------

	var : type = Query(value, INSTRUCTIONS)      	   	Validacion de parametros. Agregar resticciones, validaciones y metadatos a los parametros.    

.		   												=====================INSTRUCTIONS======================
.														...					Colocar Valor requerido "explicito" (called Ellipsis). Normally, when something is required, you can simply omit a default parameter. var: str = Query(default=...)
.														default=None		Colocar Valor Default explicto. None -> valor opcional
.		 													===Validation str====
.														max_length=50		Restringir longitud maxima 
.														min_length=3		Restringir longitud minima 
.														regex="reg_ex"		Restringir parametro con Expresion regular. Regular expression. Debe coincidir.
.	 														===Validation Number===
.														gt=666				Greather than
.														ge=999				Greather or Equal
.														le=333				Less or Equal 
.	  													lt=000				Less than
.	 														====Metadatos=====	
.														alias="alias1"		Create alias of parameter. When need to name with a NOT valid Python variable name. ej. var: str = Query(default=None, alias="item-query")
.														title = "title1" 	Agregar Metadato titulo. Visible en Documentación interactiva.
.														description="descr"	Agregar Metadato descripcion. Visible en Documentación interactiva.
.														deprecated=True		Indicar que variable ya es obsoleta (ya no la quieres). Se mostrara para que usuarios tomen medidas antes de borrarla.



.														Validaciones de Valores. (ingresados por el cliente)
	from pydantic import EXOTIC_TYPE					1.- Importacion de Tipos especifico desde Pydantic (https://pydantic-docs.helpmanual.io/usage/types/#pydantic-types)
	var : EXOTIC_TYPE = value							2.- Remplazar el type normal (tipado estatico) por el Exotic_Type 

.														================Tipos de datos exóticos de Pydantic===========================
.															HttpUrl 			Valida si una URL es valida 
.															FilePath 			Valida si la ruta ingresada es un archivo 	(c:/windows/system32/432.dll)
.															DirectoryPath		Valida si la ruta ingresada es un directorio (c:/windows/Desktop/Folder)
.															EmailStr			Valida si lo ingresado es un email 					( XYZ@email.com)
.																				Requiere instalacion: pip install pydantic[email]  ??? 
.																				Requiere instalacion: pip install email-validator  ???
.															PaymentCardNumber 	Valida si lo ingresado es un número de tarjeta
.															IPvAnyAdress 		Valida si lo ingresado es una dirección IP
.															NegativeInt 		Valida si lo ingresado es un número entero negativo
.															PositiveInt 		Valida si lo ingresado es un número entero positivo
.															NegativeFloat 		Valida si lo ingresado es un número negativo de tipo flotante
.															PositiveFloat 		Valida si lo ingresado es un número positivo de tipo flotante
.																etc.


.														Validacion por opciones.	Especificar y limitar conjunto especifico de strings/int que seran opciones validas a ingresar. 
.															-Enum				checks that the value is a valid Enum instance
.															-IntEnum			checks that the value is a valid IntEnum instance

	from enum import Enum							 	1.- Importa clase (Enum/IntEnum). (del modulo enum de python)
	class Enum_str(Enum):								2.- Heredar de la seleccionada (Enum/IntEnum)
.		str1 = 'str1'									3.- Crear como atributos con valores que funcionaran como opciones disponibles
.		str2 = 'str2'									|
.		str3 = 'str3'									|		
.														|	
	var : Enum_str = None								4.- Remplazar el type normal con la clase creada. Equivalen a type "str"/ type "int" (Enum/IntEnum respectivamente)
	


	------------------------------------------------------------------------------	
.			Model  
    -------------------------------
.														Creacion de modelo.
	from pydantic import BaseModel						1.-Importacion de BaseModel de pydantic 
	----------------
	class Model1(BaseModel):							2.-Creacion de modelo. Una clase que hereda de BaseModel.
.		atribute1 : type								3.-Atributos con tipado estatico
.		atribute2 : type
.		opt_atrib1 : type = value						3.1.-Atributos Opcionales, con tipado estatico
	----------------
	@app.post("/URL/"new_model")						4.- Create Path operation que manipulara modelo.	Tipo = Request:POST / PUT / DELETE / etc.
	def create_object(var_model: Model1):				5.- Funcion con parametro que tendra como type nuestro modelo. El nombre del parametro, sera el nombre de la variable donde se instanciara el objeto desde modelo (clase). 
.		return 


	Field()												Especificar una variable como atributo de un modelo. REQUIERE IMPORTACION la clase desde pydantic
.														Usado solo en los atributos en un modelo(clase). Funciona para ingresar validaciones y metadatos
.															from pydantic import Field						
.															class Model1(BaseModeL):							
.																atrib1: type = Field(value)
.		   														atrib2: type = Field(value)
 	atrib1: type = Field(value, INSTRUCTIONS)			Para validaciones de parametros de un Modelos (similar a clases Body, Query, Path, etc de fastapi).
.														Ver arriba (==INSTRUCTIONS==) 	


	var = object.dict()									Regresar 2 JSON unificados(regresar 2 Request body unficados). Poco Comun. 
	var.update(object2.dict())								Unificar los 2 JSON antes de returnarlos (convertirlos en dicc)
	return var


	------------------------------------------------------------------------------	
.			Automatic examples 							Valores automaticos para Verificar con Interactive API documentation (by Swagger or ReDoc)
   	-------------------------------			

	var: type = Path(value, example= value) 			Valores automaticos para Path parameter.  
.															
	var: type = Query(value, example= value)  			Valores automaticos para Query parameter. 


	class Model1(BaseModel):							Valores automaticos para Modelos No.1. 	
.		atrib1: type = Field(None, example= value)			Especificada directamente en el atributo.


	class Model1(BaseModel):							Valores automaticos para Modelos No.2. 
.		atrib1: type = Field(value)							Creacion subclase dentro del modelo que tiene todos los atributos y sus valores.
.		atrib2: type = Field(value)
      
.		class Config:								
.		|	schema_extra = {
.		|		"example" : {"atrib1": "value",	"atrib2": int}
.		|		}



	------------------------------------------------------------------------------	
.			Response Model  					/ Esconder valores Sensibles
	-------------------------------
.
.													Response Model: Es parametro del path operation (decorator), regresa como respuesta (en lugar del modelo real) un modelo (response model) con atributos que determinamos seran mostrados.
.														Usos: 	-Limitar datos que saldran como respuesta (evitara filtrarse/mostra dato sensibles ej. password)
.																-Convertir el tipo de datos que saldra
.																-Validar datos
.																-Adjuntar un JSON como respuesta
.																-Sera usado por el Interactive API documentation
.
	Crear Response model:
	-	1 Tener Modelo base y su Path Operator.
	-	2 Crear Response Model (con atributos deseados a mostrar en el return).
	-	3 En el Decorador (fuera del path) ingresar la instruccion: "response_model" y como su valeu el -Response Model- creado.
.			Ej. -> En los siguientes casos aunque se retorne "user" que vale: "Model_Input", se enviara como respuesta: "Model_Output"

.											Ejemplo 1
.								--------------------------------
	from pydantic import BaseModel, Field						Metodo Bruto. Hace duplicidad de codigo.
	|
	class Model_Input(BaseModel):									<-Modelo principal con datos sensibles
	|	atributes1 : type = Field(...)	
	|	atributes2 : type = Field(...)							
	|	password: str = Field(...)
    |
	class Model_Output(BaseModel):									<-Modelo copia sin datos sensibles que sera regresado en la respuesta.
	|	atributes1 : type = Field(...)	
	|	atributes2 : type = Field(...)							
    |
	@app.post("/URL/"new_model", response_model = Model_Output)	<- En decorador -> response_model = Model_OUT			
	def create_user(user: Model_Input):				
	|	return user

.											Ejemplo 2  (mejorcito)
.								--------------------------------
	from pydantic import BaseModel, Field						Metodo con herencia (no duplicidad)
	|
	class ModelBase(BaseModeL):										<-Padre con atibutos generales.
	|	atributes1 : type = Field(...)	
	|	atributes2 : type = Field(...)							
	|
	class Model_INPUT(ModelBase):									<-Modelo principal. hereda Padre y adiciona datos sensibles sobreagregados			
	|	password: str = Field(...)
	|
	class Model_OUTPUT(ModelBase):									<-Modelo respuesta. hereda de Padre. Aunque pass, mostrara lo atrib de padre.
	|	pass						
  	|
	@app.post("/URL/"new_model", response_model = Model_OUTPUT)		<- En decorador -> response_model = Model_OUT			
	def create_user(user: Model_INPUT):				
	|	return user

	---------------------------------------------------------------------------------

	var : SecretStr										Ocultar una variable sensible con: ******** (incluso si se convierte a Dict, o JSON). REQUIERE IMPORTAR la clase SecretStr de pydantic										
.															from pydantic import SecretStr
.															class Model1(BaseModel):
.																password: SecretStr

	.get_secret_value()									Acceder al valor oculto por: *******
































	Estructura general de FastAPI 
	---------------------------------------------


#Python
from enum import Enum

#Pydantic
from pydantic import BaseModel, Field, EmailStr

#FastAPI
from fastapi import FastAPI, status
from fastapi import Body, Path

app= FastAPI()

						 	
class Grade_Univ(Enum):							
    primer_grado = 'primer grado'									
    segundo_grado = 'segundo grado'
    tercer_grado = 'tercer grado'

class StudentBase(BaseModel):
	student_id: int = Field(..., gt=0, le= 1000000, title= "Studen ID", description= "This ID is Unique for every student") 
	apellido_paterno: str = Field(..., min_length=1, max_length=15)
	apellido_materno: str = Field(..., min_length=1, max_length=15)
	nombres: str = Field(..., min_length=1, max_length=20)
	grado_universitario: Grade_Univ = Field(...)
	hobby: str = Field(default = None, max_length=30)	
	

class Student(StudentBase):
    edad: int = Field(..., gt=17)
    email: EmailStr = Field(...)
    calificacion_ingreso: float = Field(..., gt=60.00, le= 100.00)
    class Config: 
        schema_extra = {
                "example" : {
                    "student_id": 666,	
				    "apellido_paterno": "Roca", 
				    "apellido_materno": "Dono", 
				    "nombres": "Carlos", 
                    "grado_universitario": "tercer grado",
                    "edad": 21,
                    "calificacion_ingreso": 97.55, 
                    "email": "roca@gmail.com"
                    }
			    }
class Student_Output(StudentBase):
    pass

@app.get(
    path= "/", 
    status_code= status.HTTP_200_OK 
    )									
async def root():								
    return {"message": "Hello World"}				

@app.get(
    path= "/URL/estudiantes/{student_id}", 
    status_code= status.HTTP_202_ACCEPTED
    )
async def get_student(
	student_id: int = Path (...)
	):
	return {"message": "The student is..."}

@app.post(
    path= "/URL/new_student", 
    response_model = Student_Output, 
    status_code= status.HTTP_202_ACCEPTED)
def create_student(
	student: Student = Body(...)
	):
	return student