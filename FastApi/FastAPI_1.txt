https://fastapi.tiangolo.com/
https://fastapi.tiangolo.com/tutorial/

Definiciones
----------------------------
	JSON		Mensaje  usado por HTTP como medio de comunicacion. Es un diccionario.
	Path		Also called Route or Endpoint. last part of the URL. Todo aquello que vaya después de nuestro Dominio URL
	Operation	HTTP "methods"
	OPEN API 	Especificación que define como describir, crear y visualzar API’s. Permite reconocer si una API está definida adecuadamente
	Swagger		Software que verifica nuestra API (Segun OPEN API). Documentación interactiva/Interactive API documentation.
	ReDoc 		Alternativa de Swagger.
	Request: 	Peticion del cliente al servidor.
	Response: 	Respuesta del servidor al cliente.
	Entidad     Cualquier objeto 
	Modelo      Molde/clase para crear objeto. Representación en codigo de un objeto(entidad). Requiere importar framework Pydantic (clase BaseModel)
	Pydantic	Framework para crear modelos. Se requiere en FastAPI
	Response: 		Respuesta del servidor/API al cliente. ALWAYS sended.
	Response body:	Continene el body de un HTTP response. Realizada con GET. Contiene la info de la consulta o solicitud de informacion
	Request: 		Peticion del cliente al servidor/API. Not always needed.
	Request Body: 	Contiene el body de una HTTP request. Realizada con POST (principalmente). Contiene la info de la peticion. (Crear modelos / modificar o eliminar)

	Response Model: Es parametro del path operation (decorator), regresa como respuesta (en lugar del modelo real) un modelo (response model) con atributos que determinamos seran mostrados.	
	Input model:	Deeds to be able to have a password.
	Output model:	Should not have a password.
	Database model: Would probably need to have a hashed password.

	Docstring:		Es un String literal de toda la vida que ocurre como el primer statement en el módulo, función, clase o método definido. En este caso con fastApi automáticamente podemos ver los docstrings en la documentación interactiva.


Ecosistema para FastAPI
--------------------------------------------
	Uvicorn: 	librería de Python que funciona de servidor (cualquier cpu se convierta en un servidor)
	Starlette: 	framework de desarrollo web de bajo nivel para aplicaciones, FastAPI lo simplifica.
	Pydantic: 	framework (similar a pandas), usado para cerar modelos los cuales aprovechara FastAPI




						//////////////////===============FastAPI===============////////////////////


-------------------------------------------------------------------------------
First Steps
------------------------------------------------------------------------------
    1 Crear Carpeta projecto
    2 Inicializar y activar Git y Venv
    3 Instalar FastApi y Servidor	
    4 Crear file/modulo	main.py
				----------------------
    5 Desarrollar la API
    	5.1 Importar FastAPI
    	5.2 Create an app instance
    	5.3 Write a path operation decorator (@app.get("/"))
    	5.4 Write a path operation function (async def root(): ... )
    6 Run code 
    
    
	    |-----------------------------------------------------------------------------------------------------------
		|		Basic estructure
    	|-----------------------------------------------------------------------------------------------------------
    	|  	
    	| 			from fastapi import FastAPI						Class FastAPI imported 
    	|						
    	|			app = FastAPI()									Var que instancia(objeto) de FastAPI (clase). Sera nuestra APP de FastAPI.  
    	|				
    	|			@app.get("/")									Path operation Decorator
    	|			async def func():								Path operation Function
		|			'''Docstring'''									Documentacion de la funcion
    	|				return {"message": "Hello World"}			Respuesta {JSON}
    	|
    	-----------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------
	Install and Run  
-------------------------------

	pip install fastapi server1							Instalar FastAPI y el servidor a usar			
    pip install fastapi uvicorn							Instalar FastAPI y el servidor Uvicorn
    pip install "fastapi[all]"							Instalar FastAPI y el servidor default (Uvicorn)

	
	uvicorn module:appname --reload 					Correr servidor. (Uvicorn)    		ej. uvicorn main:my_app --reload
		        											--reload 	make the server restart after code changes. Only use for development.
	CTrl + C											Cerrar servidor.											
														
	http://127.0.0.1:8000								Ver respuesta del server. (JSON response) (after activation)
	http://127.0.0.1:8000/docs							Ingresar a Interactive API documentation (by Swagger)  	->docs
	http://127.0.0.1:8000/redoc							Ingresar a Interactive API documentation (by ReDoc) 	-redoc
	

------------------------------------------------------------------------------
	Path operation Decorator
------------------------------

	@app.get("/URL")									Decorador que indica el path y le dice a FastAPI que la funcion debajo manejara las solicitudes y metodo HTTP (operation) con el quelo hara.
	@app.get("/URL", param=val)							----------------------------
														HTTP metodos del Decorador
														----------------------------													
															.get()		Read data.
															.post()		Create data.
															.put()		Update data.
															.delete()	Delete data.
														----------------------------
														Parametros del Decorador:   			(extenso ver Variables y parametros)
														----------------------------														
															"/URL/"								URL en formato string
															path= "/URL"						Especificar el path. (Normamente no se usa, el primer parametro pasado sera el Path (URL)
															'{}'								Variables en Path.  Pueden ser multiples variables en el path.
															status_code= 						Definir un status code (default >200). Requiere importar status. Ver abajo.
															response_model= 					Ver abajo. Response Model.
															response_description=""				Describe al response_model
															tags=["tag"]						Etiquetar (Mas info ver TAGS)
															summary= ""							Titulo personalizado
															description=""						Describe a la funcion (Pero se usa mejor el ==docstrings==)
															deprecated= True 					Deprecar funcion. Dejarla sin uso sin borrarla.
															include_in_schema=False				No mostrarse en la Interactive API documentation /docs /redoc
															response_model_exclude_unset=True	No mostrar los atributos no llenados de un response_model al regresarlo.

												
		response_model=model_out							Crear response model. 									(Ver en response model)
																@app.get('/url', response_model=model_out)	
							
		status_code= 404									Especificar un status code.								(ver status code en http.txt)
																@app.get('/url', status_code=200)	

		status_code= status.HTTP_200_OK 					Especificar un status code. REQUIERE IMPORTACION		(ver status code en http.txt)
																from fastapi import status
																@app.get('/url', status_code=status.HTTP_200_OK)

		tags=["tag"]										Dar una etiqueta. Visible en Interactive API documentation
																@app.get('/url', tags=["tag"]

		summary = " "										Otorgar titulo personalizado
																@app.get('/', summary = "Home page")


------------------------------------------------------------------------------
	Path operation Function
------------------------------

  	def func():											Funcion   
		'''Docstring'''									Docstring
	    return {"" : ""}								Return un JSON (Un diccionario en Python). 		Cualquier cosa sera automaticamente convertida a JSON


  	async												Especificar Funcion Asincronica   	    
															async def func():
	def func(var1:type, var2:type):	    	 			Funcion con Parametros con Tipado estatico (no requiere ->)

														----------------------------
														Parametros de la funcion   			
														----------------------------	
															-Path parameter		Valor obligatorio.
															-Query parameter	Peticion del cliente.		Response body / GET.
															-Body parameter		Recibir info del cliente. 	Request body/ POST, PUT, DELETE
															...	...	...	...	..
															-Header parameters	Recibe Cabeceras HTTP 
															-Cookie parameters	Recibe Data from PC
															-Formularios		Recibe Data from formularios desde el front_End
															-File parameters	Recibe Files(imágenes, audio, vídeo, etc.)

														**FastAPI identifica automaticanente que tipo de parametro se trata, y le otorga caracteristicas propias de cada clase (Path, Query, Body, etc.)  
														y le da manejo a los valores recibidos en los parametros. Y sin que nosotros hagamos codigo, como ventajas de FastAPI otorga:
															-Automatic Data validation:		Tipado estatico. Si valor recibido no coincide con el tipo param (path-str, body-JSON) lanza => HTTP error
															-Automatic data parsing   		Ej. Path para:  "/URL/34" -> def func(p: int):  -> "34" (str) => 34 (int). 
															-AutoDocumentation: 			/docs  /redoc

	Path Parameters
	------------------------------------
		@app.get("/{p}")								Obligatorio variable en path { }. Esta pasara como argumento a la funcion.
		async def func(p: type):						Path parameter = p: type. 
			return {}
														Caracteristicas
														----------------------------
															Identificacion por FastAPI: cada Path parametro tiene correspondencia con una variable de URL del decorador.
															Valor: 	'string'  	(por venir de '/URL')
																	OBLIGATORIO.
																	Valor recibido desde el cliente atravez de la variable en URL
	
	Query Parameters		
	------------------------------------							
		@app.get("/")									Query Parameters =  q:type
		async def func(q:type):							
			return {}										  
														Caracteristicas
														----------------------------
															Response body / GET. Usado para que server de respuesta a una peticion de info de BD del cliente.
															Identificacion por FastAPI: Parametro idependiente, sin relaciones.  (NO parte de path parametro)
															Valor: 	'string'  	(por venir de '/URL')
																	Envio No obligatorio.
																	Son sets de key-value, van despues de ? en el URL, y separatedos por &   (?key=value&key=value)

	Body Parameters		
	------------------------------------	
		class Model1():
											
		async def func(b:Model1 = Value):				Body Parameters =  b:Model
			return {}	
															Caracteristicas
															----------------------------
															Request body/ POST, PUT, DELETE.  Usado para la recepcion de informacion desde el cliente (Y con este realizar creacion, modificacion o eliminacion de entitiess(modelos) de una BD.)
															Identificacion por FastAPI: Cada parametro tiene especificado como type a un Modelo (al cual vaciaran la info de un JSON).
															Valor: 	JSON  {:}
																	Usado para la recepcion de informacion desde el cliente. Seran recibidos como JSON. Toda la informacion pasara a un modelo.

															Mas especifico (forma del JSON)
															------------------------------
																class Model1(BaseModel):
																	name:str = Field(...)
																	price:int = Field(...)
																
																class Model2(BaseModel):
																	name:str = Field(...)
																	model:int = Field(...)

																....................................................
																async def func(param : Model1):		
																....................................................
																	JSON body expected:     Body directly {}

																		{ 'name' : 'ABC', 'price': 20 }	

																....................................................
																async def func(AAA : Model1 = Body(..., embed=True)):	<--- JSON con llave	
																....................................................
																	JSON body expected:     Body directly with key

																		{AAA: {'name' : 'ABC', 'price': 20} }		

																....................................................
																async def func(AAA : Model1,  BBB : Model2):      		<--- Dos bodies / dos Modelos o mas en una funcion
																....................................................
																	JSON body expected:     Body directly with key

																		{'AAA': {'name' : 'ABC', 'price': 20},
																		 'BBB': {'name' : 'ABC', 'model': 2022},}


	Especificar tipo de parametro						Gana la cualidades de la clase, sus metodos y atributos. FasAPItratara ese parametro segun clase especificada.
	------------------------------------

		from fastapi import Clase							Importar clase especifica.

		param:type = Clase()								Pasar la funcion que instancia la clase como valor del parametro

			Path()												-Path parameter. 		
																		from fastapi import Path														 
																		@app.get('/url/{var1}')
																		def func(var1 : type = Path(value)): 	
			Query()												-Query parameter. 		
																		from fastapi import Query                     	 	 
																		def func(var : type = Query(value)):              		   
			Body()												-Body parameter. 		 
																		from fastapi import Body
																		def func(var : type = Body(value)): 
			Header()											-Header parameters. 	
																		from fastapi import FastAPI, Header
																		def func(var : type = Header(value)):
			Cookie()											-Cookie parameters.
																		from fastapi import Cookie
																		def func(var : type = Cookie(value)):
			Form()												-Formularios. 								REQUIERE install python-multipart (ver en formularios)
																		from fastapi import Form 
																		def func(var: type = Form(value)):
			File()	   											-File parameters		-Files(imágenes, audio, vídeo, etc.)  

	Formularios	/ Form parameters						
	------------------------------------							
		@app.get("/")									Formulary =  Form(...)
		async def func(param: str = Form(...) ):							
			return {}										  
														Caracteristicas
														----------------------------
															Used to receive form HTML fields (<form></form>) instead of JSON (Body).
															Forms hereda de BODY
                                                            Request body/ POST, PUT, DELETE.  Recepcion de informacion desde el cliente

															Identificacion por FastAPI:  Requiere declarar clase Form
															Valor: 	HTML special encoding data (part HTTP protocol). 
                                                                        (application/x-www-form-urlencoded or multipart/form-data)

															Una funcion PUEDE recibir multiples Form y files de multiples form fields (mismo formato HTTP), pero no pueden combinarse Forms/Files con Query param (ya que Query llega como JSON)

                                                            ----------------------------------------------------------------------
                                                                1.- Instalar libreria requerida (ayudara a entender codificacion de http protocolo). 
                                                                2.- Importar clase Form 
                                                                3.- Funcion con parametros con nombre igual a las label de HTTP.


                                                                pip install python-multipart                         
                                                                    -------------
                                                                from fastapi import Form                             

                                                                @app.post('/')                                                              
                                                                asyc def login(                                     
                                                                    username: str = Form(...),  
                                                                    password: str = Form(...)
                                                                    ):
                                                                    return

	Files / file parameters								(Ver en formularios)
	------------------------------------										

        param: type = File(...)                         Ingreso de File segun tipo indicado (bytes, etc)
        param: UploadFile = File(...)			        Ingreso de File segun tipo UploadFile (tipo especial que agrega mas caracteristicas y ventajas vs bytes)
                                                                
														Caracteristicas
														----------------------------
                                                            Files herada de Form (que hereda de Body)
															Receive Files from forms HTML fields (<form></form>) instead of JSON (Body).    
                                                            Request body/ POST, PUT, DELETE.  Recepcion de informacion desde el cliente
                                                                BBDD guarda ruta para acceder al file/ Server guarda el File

															Una funcion PUEDE recibir multiples Form y files de multiples form fields (mismo formato HTTP), pero no pueden combinarse Forms/Files con Query param (ya que Query llega como JSON)


------------------------------------------------------------------------------
	Variables / parametros en FastAPI.  
-------------------------------	

		param: type											Parametro de func/ Atributo con valor obligatorio 	(not declare any default)
																def func(par1: type):

		...													Especificar "explicitamente" que valor de variable/parametro/atributo es requerido/OBLIGATORIO
																param : type = ...
																param: type = Class(default= ...)

		param: type = defaultValue			 				Parametro de func/ Atributo con valor Opcional (declarar valor default)
																def func(param: type = defaultValue):
																param: type = Class(default= value)
		
		param: type = None									Parametro de func/ Atributo con valor opcional con valor None 	 (Python>3.9)
																def func(par1: type = None):
																param: type = Class(default= None)
																----------------------------
																	(python >3.5)	-from typing import optional
																					-def root(par1: optional[type] = None:
																	(python >3.10)	-from typing import Union
																					-def root(par1: type | None = None:
																	(python <3.10) 	-from typing import Union
																					-def root(par1: Union[type, None] = None:
		
		param: list[type] = Query(default= None)			Query parameter. Recibir multiples valores en un solo Query parametro. Definir lista.
																>>> '/URL/?q=carro&q=Camioneta
																q: list[type] = Query(default= None)
		
		embed=True											Body parameter. Recibir JSON con contenido del modelo dentro de value, y key con nombre del modelo. 
															Recibir JSON con key (nombre modelo) y value con el contenido del model (body)
																	AAA:Model = Body(..., embed=True)
																	JSON {'':'', '':''} => {'AAA': {'':'', '':''} } 

		
------------------------------------------------------------------------------
	Validation and Metadata.  		 	Todos iguales = Path, Query, Body, Header, Cookie, Form, Field.
------------------------------------------
	Sirve para realizar validacion adicional a la que ya hace FasAPI y permite agregar metadatos.
	Todas las clases comparten mismos metodos de validacion


											      	   	Validacion de parametros. 
														--------------------------------------------------------------------------------------------------------------------------
	var : type = Clase(value, INSTRUCTIONS)				Requiere especificar explicitamente una clase de parametro (ver arriba). y Agregar validacion/metadatos como argumentos extras al value.
														Agregar resticciones, validaciones y metadatos a los parametros.    

		   												=====================INSTRUCTIONS======================
															...					Colocar Valor requerido "explicito" (called Ellipsis). Normally, when something is required, you can simply omit a default parameter. var: str = Query(default=...)
															default=None		Colocar Valor Default explicto. None -> valor opcional
																===Validation str====
															max_length=50		Restringir longitud maxima 
															min_length=3		Restringir longitud minima 
															regex="reg_ex"		Restringir parametro con Expresion regular. Regular expression. Debe coincidir.
																===Validation Number===
															gt=666				Greather than
															ge=999				Greather or Equal
															le=333				Less or Equal 
															lt=000				Less than
																====Metadatos=====	
															alias="alias1"				Create alias of parameter. When need to name with a NOT valid Python variable name. ej. var: str = Query(default=None, alias="item-query")
															title = "title1" 			Agregar Metadato titulo. Visible en Documentación interactiva.
															description="descr"			Agregar Metadato descripcion. Visible en Documentación interactiva.
															deprecated=True				Indicar que variable ya es obsoleta (ya no la quieres). Se mostrara para que usuarios tomen medidas antes de borrarla. (Query parameters)(No sirve con Body parameters)
															include_in_schema=False		No mostrarse en la Interactive API documentation /docs /redoc (Query parameters)(No sirve con Body parameters)


														Validaciones de Valores. 
														--------------------------------------------------------------------------------------------------------------------------
	from pydantic import EX_TYPE						1.- Importacion de Tipos especifico desde Pydantic (https://pydantic-docs.helpmanual.io/usage/types/#pydantic-types)
	var:EX_TYPE = value									2.- Remplazar el type normal (tipado estatico) por el Exotic_Type 
														Agrega validacion de datos ingresados por el cliente

														================Tipos de datos Exóticos de Pydantic===========================
															HttpUrl 			Valida si una URL es valida 
															FilePath 			Valida si la ruta ingresada es un archivo 	(c:/windows/system32/432.dll)
															DirectoryPath		Valida si la ruta ingresada es un directorio (c:/windows/Desktop/Folder)
															EmailStr			Valida si lo ingresado es un email 					( XYZ@email.com)
																				Requiere instalacion: pip install pydantic[email]  ??? 
																				Requiere instalacion: pip install email-validator  ???
															PaymentCardNumber 	Valida si lo ingresado es un número de tarjeta
															IPvAnyAdress 		Valida si lo ingresado es una dirección IP
															NegativeInt 		Valida si lo ingresado es un número entero negativo
															PositiveInt 		Valida si lo ingresado es un número entero positivo
															NegativeFloat 		Valida si lo ingresado es un número negativo de tipo flotante
															PositiveFloat 		Valida si lo ingresado es un número positivo de tipo flotante
																etc.

															SecretStr			Ocultar una variable sensible con: ******** (incluso si se convierte a Dict, o JSON). REQUIERE IMPORTAR 										
																					from pydantic import SecretStr
																					class Model1(BaseModel):
																						password: SecretStr
															.get_secret_value()	Acceder al valor oculto por: *******

	UUID												Universally Unique identifier. identificador único universal. REQUIERE IMPORTACION
														Crear un id unico. Se coloca como type. 
														Formato= 'str' 
															ej.-----------------------
																from uuid import UUID
																class User(BaseModel):
																	user_id: UUID = Field(...)

	date												Clase para manejar fechas. Cumpleanos, fecha de nacimiento. REQUIERE IMPORTACION
														from datetime import date.  (Ver Python intermedio)  
														Formato = yyyy-mm-dd   SERA UN STR
															ej.-----------------------
															class User(BaseModel):
																birth_date: date = Field(...)

	time												Clase para manejar hora. REQUIERE IMPORTACION.  
														from datetime import time (Ver Python intermedio)
														Formato= 00:00:00.000000    (hora:min:seg.miliseg)  SERA UN STR
															ej.-----------------------
															class User(BaseModel):
																creation_hour: time = Field(...)


	datetime											Clase para manejar fecha y hora.  REQUIERE IMPORTACION.  
														from datetime import datetime (Ver Python intermedio)
														Formato: yyyy-mm-dd 00:00:00.000000    hora:min:seg.miliseg SERA UN STR
															ej.-----------------------
															class User(BaseModel):
																creation: datetime = Field(default=datetime.now())




														Validacion por opciones.	
														--------------------------------------------------------------------------------------------------------------------------
														Especificar y limitar conjunto especifico de strings/int que seran opciones validas a ingresar. 
	Enum												Checks that the value is a valid Enum instance
	IntEnum												Checks that the value is a valid IntEnum instance

		from enum import Enum							 	1.- Importa clase (Enum/IntEnum). (del modulo enum de python)
		class Enum_str(Enum):								2.- Heredar de la seleccionada (Enum/IntEnum)
			str1 = 'str1'									3.- Crear como atributos con valores que funcionaran como opciones disponibles
			str2 = 'str2'									|
			str3 = 'str3'									|		
															|	
		var : Enum_str = None								4.- Remplazar el type normal con la clase creada. Equivalen a type "str"/ type "int" (Enum/IntEnum respectivamente)
	

------------------------------------------------------------------------------	
	Model  
-------------------------------
	Creacion de modelo.
	-------------------------------------
		from pydantic import BaseModel						1.-Importacion de BaseModel de pydantic 
	
		class Model1(BaseModel):							2.-Creacion de modelo. Una clase que hereda de BaseModel.
			atribute1 : type								3.-Atributos con tipado estatico
			atribute2 : type
			opt_atrib1 : type = value						3.1.-Atributos Opcionales, con tipado estatico
	
		@app.post("/URL/"new_model")						4.- Create Path operation que manipulara modelo.	Tipo = Request:POST / PUT / DELETE / etc.
		def create_object(var_model: Model1):				5.- Funcion con parametro que tendra como type nuestro modelo. El nombre del parametro, sera el nombre de la variable donde se instanciara el objeto desde modelo (clase). 
			return 


	Field()												Especificar una variable como atributo de un modelo. REQUIERE IMPORTACION la clase desde pydantic
														Usado solo en los atributos en un modelo(clase). Funciona para ingresar validaciones y metadatos
															from pydantic import Field						
															class Model1(BaseModeL):							
																atrib1: type = Field(value)
		   														atrib2: type = Field(value)

 	atrib:type = Field(value, INSTRUCTIONS)				Para validaciones de parametros de un Modelos (similar a clases Body, Query, Path, etc de fastapi).
															Ver arriba (==INSTRUCTIONS==) 	

	.dict()												Convertir datos de un modelo a diccionario (Pydantic method)
															entity/JSON/datos de modelo = > python dicc

	Model1(**Model2.dict())								Pasar datos de un modelo como argumentos de otro modelo
															.dict() 	Convierte datos de modelos a diccionarios
															** 			Informa a funcion que ingresan valores key-value. Como llega {'':''} hace Unwrapping de dic para mandar solo '':''
															

	var = object.dict()									Regresar 2 JSON unificados(regresar 2 Request body unficados). Poco Comun. 
	var.update(object2.dict())								Unificar los 2 JSON antes de returnarlos (convertirlos en dicc)
	return var


	Nested Models										Modelo que es un atributo de otro modelo
	-----------------------
		class Model1(BaseModel):						Modelo pasa como el type de un atributo.	
			atribute1 : type								
			atribute2 : Model2
														Resultado JSON esperado		JSON BODY NESTED
														-----------------------------------------
														{ '':'', "":{Model2} }


------------------------------------------------------------------------------	
	Automatic examples 							Valores automaticos para Verificar con Interactive API documentation (by Swagger or ReDoc)
-------------------------------			

	example= value							 			Valores automaticos para parameter.  
															var: type = Query(value, example= value) 
															var: Model = Body(value, example =  {'':'','':''}) 

	examples= value1, value2							Varios valores automaticos
															var: type = Query(value, examples= value1, value2) 
															var: Model = Body(value, examples =  {'example1': {'':'','':''} , 'examp_with_error': {'':'','':''}})  **Body parameters, los ejemplos de JSON requeriran {'key':{model}, 'key': {model}

																
	class Model1(BaseModel):							Valores automaticos para Modelos No.1. 	
		atrib1: type = Field(None, example= value)			Especificada directamente en el atributo.


	class Model1(BaseModel):							Valores automaticos para Modelos No.2. 
		atrib1: type = Field(value)							Creacion subclase dentro del modelo que tiene todos los atributos y sus valores.
		atrib2: type = Field(value)
      
		class Config:								
			schema_extra = {
				"example" : {"atrib1": "value",	"atrib2": int}
				}



------------------------------------------------------------------------------	
	Response Model  					/ Esconder valores Sensibles
-------------------------------

													Response Model: Es parametro del path operation (decorator), regresa como respuesta (en lugar del modelo real) un modelo (response model) con atributos que determinamos seran mostrados.
														Usos: 	-Limitar datos que saldran como respuesta (evitara filtrarse/mostra dato sensibles ej. password)
																-Convertir el tipo de datos que saldra
																-Validar datos
																-Adjuntar un JSON como respuesta
																-Sera usado por el Interactive API documentation

	Crear Response model:
	-	1 Tener Modelo base y su Path Operator.
	-	2 Crear Response Model (con atributos deseados a mostrar en el return).
	-	3 En el Decorador (fuera del path) ingresar la instruccion: "response_model" y como su valeu el -Response Model- creado.
			Ej. -> En los siguientes casos aunque se retorne "user" que vale: "Model_Input", se enviara como respuesta: "Model_Output"

	Ejemplo 1
	--------------------------------

		from pydantic import BaseModel, Field							Metodo con herencia (no duplicidad)
		
		class ModelBase(BaseModeL):										<-Padre con atibutos generales.
			atributes1 : type = Field(...)	
			atributes2 : type = Field(...)							
		
		class Model_INPUT(ModelBase):									<-Modelo principal. hereda Padre y adiciona datos sensibles sobreagregados			
			password: str = Field(...)
		
		class Model_OUTPUT(ModelBase):									<-Modelo respuesta. hereda de Padre. Aunque pass, mostrara lo atrib de padre.
			pass						
		
		@app.post("/URL/"new_model", response_model = Model_OUTPUT)		<- En decorador -> response_model = Model_OUT			
		def create_user(user: Model_INPUT):				
			return user
	---------------------------------------------------------------------------------


	response_model=Union[Model1, Model2])			Responder con diferentes modelos en un solo response model segun caso presentado. 
													Requiere importer Union. La respuesta puede ser cualquiera de los dos.
														from typing import Union
														class Resp_Model1
														class Resp_Model2
														@app.get("/", response_model=Union[Resp_Model1, Resp_Model2])


	response_model=list[Model]						Responder con una lista de objetos. 
														1.- Un modelo creado. 
														2.- Una lista donde se depositaran las instancias de ese modelo. 
														3.- Regresar esa lista de objetos.
														-----------------------------------------------------------------
															class Item(BaseModel):
																name: str
																description: str

															items = [
																{"name": "Foo", "description": "There comes my hero"},
																{"name": "Red", "description": "It's my aeroplane"},
															]

															@app.get("/items/", response_model=list[Item])
															async def read_items():
    															return items

	response_model=dict[type, type]					Responder con un diccionario y no con un modelo































	Estructura general de FastAPI 
	---------------------------------------------


#Python
from enum import Enum

#Pydantic
from pydantic import BaseModel, Field, EmailStr

#FastAPI
from fastapi import FastAPI, status
from fastapi import Body, Path

app= FastAPI()

						 	
class Grade_Univ(Enum):							
    primer_grado = 'primer grado'									
    segundo_grado = 'segundo grado'
    tercer_grado = 'tercer grado'

class StudentBase(BaseModel):
	student_id: int = Field(..., gt=0, le= 1000000, title= "Studen ID", description= "This ID is Unique for every student") 
	apellido_paterno: str = Field(..., min_length=1, max_length=15)
	apellido_materno: str = Field(..., min_length=1, max_length=15)
	nombres: str = Field(..., min_length=1, max_length=20)
	grado_universitario: Grade_Univ = Field(...)
	hobby: str = Field(default = None, max_length=30)	
	

class Student(StudentBase):
    edad: int = Field(..., gt=17)
    email: EmailStr = Field(...)
    calificacion_ingreso: float = Field(..., gt=60.00, le= 100.00)
    class Config: 
        schema_extra = {
                "example" : {
                    "student_id": 666,	
				    "apellido_paterno": "Roca", 
				    "apellido_materno": "Dono", 
				    "nombres": "Carlos", 
                    "grado_universitario": "tercer grado",
                    "edad": 21,
                    "calificacion_ingreso": 97.55, 
                    "email": "roca@gmail.com"
                    }
			    }
class Student_Output(StudentBase):
    pass

@app.get(
    path= "/", 
    status_code= status.HTTP_200_OK 
    )									
async def root():								
    return {"message": "Hello World"}				

@app.get(
    path= "/URL/estudiantes/{student_id}", 
    status_code= status.HTTP_202_ACCEPTED
    )
async def get_student(
	student_id: int = Path (...)
	):
	return {"message": "The student is..."}

@app.post(
    path= "/URL/new_student", 
    response_model = Student_Output, 
    status_code= status.HTTP_202_ACCEPTED)
def create_student(
	student: Student = Body(...)
	):
	return student