https://fastapi.tiangolo.com/
https://fastapi.tiangolo.com/tutorial/

Definiciones
----------------------------
	Path		Also called Route or Endpoint. last part of the URL. Todo aquello que vaya después de nuestro Dominio URL
	Operation	HTTP "methods"
	OPEN API 	Especificación que define como describir, crear y visualzar API’s. Permite reconocer si una API está definida adecuadamente
	Swagger		Software que verifica nuestra API (Segun OPEN API). Documentación interactiva/Interactive API documentation.
	ReDoc 		Alternativa de Swagger.
	Request: 	Peticion del cliente al servidor.
	Response: 	Respuesta del servidor al cliente.
	Entidad     Cualquier objeto 
	Modelo      Representación de una entidad en código de manera descriptiva
	Pydantic	Framework para crear modelos. Se requiere en FastAPI
	
Ecosistema para FastAPI
--------------------------------------------
	Uvicorn: 	librería de Python que funciona de servidor (cualquier cpu se convierta en un servidor)
	Starlette: 	framework de desarrollo web de bajo nivel para aplicaciones, FastAPI lo simplifica.
	Pydantic: 	framework (similar a pandas), usado para cerar modelos los cuales aprovechara FastAPI




//////////////////===============FastAPI===============////////////////////


Temas
----------------------------











-------------------------------------------------------------------------------
			-------------First Steps-------------
------------------------------------------------------------------------------
    1 Crear Carpeta projecto
    2 Inicializar y activar Git y Venv
    3 Instalar FastApi y Servidor	
    4 Crear file/modulo	main.py
				----------------------
    5 Desarrollar la API
    	5.1 Importar FastAPI
    	5.2 Create an app instance
    	5.3 Write a path operation decorator (@app.get("/"))
    	5.4 Write a path operation function (async def root(): ... )
    6 Run code 
    
    
    
------------------------------------------------------------------------------
Instalacion										||Instalar en una venv
------------------------------------------------------------------------------
									
    pip install fastapi uvicorn					Instala FastAPI y el servidor a usar (en este caso Uvicorn.)
    pip install "fastapi[all]"					Instala FastAPI y el servidor Uvicorn    
    
    
--------------------------------------------
Run the code
--------------------------------------------

	uvicorn main:app --reload					Inicializar Uvicorn indicando tu file (main.py) con la app desarrollada (app)
	uvicorn module:appname --reload 	        	--reload 	make the server restart after code changes. Only use for development.

	http://127.0.0.1:8000						See the JSON response (after activation)
	http://127.0.0.1:8000/docs					Interactive API documentation (by Swagger)
	http://127.0.0.1:8000/redoc.				Alternative Interactive API documentation (by ReDoc)    
    
    
    
---------------------------------------------------------------
			-------------Basic estructure-------------
---------------------------------------------------------------
  
    from fastapi import FastAPI					Class FastAPI 
    	
    app = FastAPI()								app es Variable con instancia(objeto) de FastAPI (clase)  
    	  
    @app.get("/")								Path operation decorator
   	async def root():							Path operation function
	    return {"message": "Hello World"}			||  {JSON}
    
    
    
    
    
    
--------------------------------------------
Path operation
--------------------------------------------
"Path" refers the last part of the URL  /


	@app.get("/URL")							Path operation Decorator. 
												Decorador que indica a FastAPI que la funcion debajo manejara las solicitudes y metodo HTTP (operation) con el quelo hara.
													.get()		Read data.
													.post()		Create data.
													.put()		Update data.
													.delete()	Delete data.
								
   	async def root():							Path operation Function.  
	    return {"" : ""}						Funcion Asincronica. 
												Retorna dict, list, str, int, Pydantic models, etc. They will be automatically converted to JSON
	    

	async def root(var1, var2:):     			Funcion con Parametros 
	async def root(var1: type, var2: type):     Funcion con Parametros con Tipado estatico (no requiere ->)
	
	------------------------------------------------------------------------------
	
		
	Path operation Decorator. 
	-------------------------
	@app.get('/url/{var}')						Path parameter.   { } Variable definida dentro del path. Automaticamente creara URL, segun variable indicada.
	@app.get('/url/{var}/url/{var}')			Path parameter multiples.

	@app.get('/url?paramet=value')				*Query Parameters.                 ?= query begin
	@app.get('/url?par1=value1&par2=value2')	*Query Parameters multiples.       &= query separator


	Path operation Function.  
	--------------------------
	@app.get("/URL")							**Query Parameters 
	async def root(par1: type, par2: type):		

	async def root(par1: int):					**Query Parameters obligatorio (not declare any default value-> query parameter required)
	
	async def root(par1: int = default_value):  **Query Parameters Opcional con valor default
	
	async def root(par1: type = None):			**Query Parameters opcional con valor None (como si no tuviera valor) (Python>3.9)
													(python >3.5)
														-from typing import optional
														-async def root(par1: optional[type] = None:
													(python >3.10)
														-from typing import Union
														-async def root(par1: type | None = None:
													(python <3.10)
														-from typing import Union
														-async def root(par1: Union[type, None] = None:


					Path parameter
					-----------------
						Variable dentro del path. 			'/url/{var}'
						Estructura: 						'{}'
						Ingreso:							Obligatorio.						
						Value: 						 		Pasara a la funcion como argumento.		

					Query Parameters
					-----------------
						*Parametros opc al final del URL	'/url?paramet=value'	
						Ingreso:							 Opcionales	 
						Estructura:	? =						'?paramet=value	
									? = & =					'?par1=val1&par2=val2'

						**Parametros de funcion no parte del path.		@app.get('/url')
																		async def root(var1: str = XYZ, var2: int = 123):


--------------------------------------------
Request Body y Response Body
--------------------------------------------

Response: 		Respuesta del servidor/API al cliente. Always sended.
Response body:	El body de una Respuesta.	
					Realizada con GET.
					-Consulta o solicitud de niformacion

Request: 		Peticion del cliente al servidor/API. Not always needed.
Request Body: 	El body de una Petición HTTP. 
					Realizada con PUT (principalmente)(Usarse otras, but except GET)
					-Crear modelos / modificar o eliminar



--------------------------------------------
Model
--------------------------------------------
	Representacion en codigo de un objeto(entidad) / 	Requiere importar framwork Pydantic (clase BaseModel)
	Crear un modelo es crear una clase.


	---------------------------------------------
	Estructura basica de modelo 
	---------------------------------------------	
	from pydantic import BaseModel					Importacion de BaseModel de pydantic para crear modelos

	class Model1(BaseModeL):						Creacion de modelo. Una clase que hereda de BaseModel.
		aribute1: str								Atributos con tipado estatico
		aribute2: int
		opt_atrib1: str = None						Atributos Opcionales, con tipado estatico



	opt_atrib1: Optional[type] = default_value		



	Estructura basica de modelo 
	---------------------------------------------
		#importaciones#
#Python
from typing import Optional
#Pydantic
from pydantic import BaseModel
#FastAPI
from fastapi import FastAPI
from fastapi import Body

class Model1(BaseModeL):
	aribute1: str
	aribute2: int
	opt_atrib1: Optional[str] = None
	opt_atrib2: Optional[bool] = None


@app.post("/URL/new")
def create_object(person: Person = Body(...)):
	return person