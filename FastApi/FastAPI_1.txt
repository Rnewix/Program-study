https://fastapi.tiangolo.com/
https://fastapi.tiangolo.com/tutorial/

		=============FastAPI========================


Definiciones
----------------------------
Path		also called route or endpoint. Todo aquello que vaya después de nuestro Dominio URL
Operation	HTTP "methods"
OPEN API 	Especificación que define como describir, crear y visualzar API’s. Permite reconocer si una API está definida adecuadamente
Swagger		Software que verifica nuestra API (Segun OPEN API). Documentación interactiva/Interactive API documentation.
ReDoc 		Alternativa de Swagger.

Temas
----------------------------




--------------------------------------------
Ecosistema para FastAPI
--------------------------------------------
Uvicorn: librería de Python que funciona de servidor (cualquier cpu se convierta en un servidor)
Starlette: framework de desarrollo web de bajo nivel para aplicaciones, FastAPI lo simplifica.
Pydantic: framework similar a pandas, este permite usar modelos los cuales aprovechara FastAPI para crear la API




---------------------------------------------------------------
First Steps
---------------------------------------------------------------
    1 Crear Carpeta projecto
    2 Inicializar y activar Git y Venv
    3 Instalar FastApi y Servidor	
    4 Crear file/modulo	main.py
    5 Desarrollar la API
    	5.1 Importar FastAPI
    	5.2 Create an app instance
    	5.3 Write a path operation decorator (@app.get("/"))
    	5.4 Write a path operation function (async def root(): ... )
    6 Run code 
    
    
    
--------------------------------------------
Instalacion
--------------------------------------------
Instalar en una venv

    pip install fastapi uvicorn			Instala FastAPI y el servidor a usar (en este caso Uvicorn.)
    pip install "fastapi[all]"			Instala FastAPI y el servidor Uvicorn    
    
    
--------------------------------------------
Run the code
--------------------------------------------

uvicorn main:app --reload			Inicializar Uvicorn indicando tu file (main.py) con la app desarrollada (app)
uvicorn module:appname --reload 	        --reload 	make the server restart after code changes. Only use for development.

http://127.0.0.1:8000				See the JSON response (after activation)
http://127.0.0.1:8000/docs			Interactive API documentation (by Swagger)
http://127.0.0.1:8000/redoc.			Alternative Interactive API documentation (by ReDoc)    
    
    
    
---------------------------------------------------------------
Basic estructure 
---------------------------------------------------------------
  
    	from fastapi import FastAPI			Class FastAPI 
    	
    	app = FastAPI()					app es Variable con instancia(objeto) de FastAPI (clase)  
    	  
    	@app.get("/")					Path operation decorator
   	async def root():				Path operation function
	    return {"message": "Hello World"}			||  {JSON}
    
    
    
    
    
    
    
    
--------------------------------------------
Path operation
--------------------------------------------
"Path" refers the last part of the URL  /


	@app.get("/URL")				Path operation Decorator. Decorador que indica a FastAPI que la funcion debajo manejara las solicitudes y metodo HTTP (operation) con el quelo hara.
								.get()		Read data.
								.post()		Create data.
								.put()		Update data.
								.delete()	Delete data.
								
								
   	async def root():				Path operation Function. Funcion asincronica que retorna dict, list, str, int, Pydantic models, etc. They will be automatically converted to JSON
	    return {"message": "Hello World"}			
	    
	async def root(var):				Funcion con parametros.
	async def root(var: str):			Parametro con Tipado. (no requiere ->)
 
 
	@app.get('/url/{var}')				Path parameter. Variable definida dentro del path. Automaticamente creara URL, segun variable indicada.
	@app.get('/url?paramet=value')			Query Parameters. ?= query begin
	@app.get('/url?par1=value1&par2=value2')	Query Parameters con multiples parametros. &= query separator



Path parameter
-----------------
Variable dentro del path. 				@app.get('/url/{var}')
Ingreso es obligatorio.						
En llaves {}						@app.get('/url/{var}')
Valor pasara a la funcion como argumento.		async def root(var: str):

Query Parameters
-----------------
parametros opcionales añadidos al final de la ruta	@app.get('/url?paramet=value')	
Son opcionales						@app.get('/url?par1=value1&par2=value2')
Inician: ?       Se Agregan mas: &

**Tambien se consideran Query Parameters 		@app.get('/url')
  los parametros de funcion no parte del path.		async def root(var1: str = ABC, var2: int = 0):


--------------------------------------------
Request Body y Response Body
--------------------------------------------

Request: 	Peticion del cliente al servidor.
Response: 	Respuesta del servidor al cliente.
Request Body: 	El body de una Petición HTTP.
Response body:	El body de una Respuesta.
