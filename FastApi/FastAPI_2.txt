------------------------------------------------------------------------------	
	Tipos de entradas de datos en FastAPI: 
-------------------------------

    Path Parameters         ->      URL y obligatorios
    Query Parameters        ->      URL y opcionales
    Request Body            ->      JSON
    Formularios             ->      Campos en el frontend
    Headers                 ->      Cabeceras HTTP que pueden ser de cliente a servidor y viceversa
    Cookies                 ->      Almacenan información
    File                    ->      Archivos como imágenes, audio, vídeo, etc.
    Upload File                     (3 parámetros:)
            Filename        ->      Nombre del archivo
            Content_Type    ->      Tipo/Formato de archivo
            File            ->      El File



------------------------------------------------------------------------------	
	Predefined values en Path param/ Query param                    Valores predefinidos
   	-------------------------------


from enum import Enum                           1.- Importacion ENUM

class Model1(str, Enum):                        2.- Crear modelo con opciones predefinidas
    azul = "azul"                                       -especificar type  -heredar de Enum
    rojo = "rojo"

@app.get("/{option}")                           
async def get_model(option: Model1):            3.- Path parametro poner como type al Modelo creado.
    if option is Model1.azul:                   
    if option.value == "rojo":
    return








------------------------------------------------------------------------------	
		Formularios.  
   	-------------------------------

.                                Used when receive form fields instead of JSON. 
.                                Datos no se recibiran de un JSON, sino de un formulario. (de HTML forms (<form></form>)).


    pip install python-multipart                         Instalar libreria requerida. (verificar estar en Venv)

    from fastapi import Form                             Importar Form (mismas validaciones y metadatos que path, query)

    @app.post(                                           Decorador con path al formulario
        path= "/login",
        response_model= login_Output,
        status_code= status.HTTP_200_OK
        )
    asyc def login(                                      Funcion con parametros con nombre  exactamente igual a las label de HTTP.
        username: str = Form(...), 
        password: str = Form(...)
        ):
        return




------------------------------------------------------------------------------	
		Files.                          En Server se guarda File/ En BBDD se guarda la ruta para acceder a ella.
   	-------------------------------

.                                |  File:
.                                |------------------------------------
.                                |     Clase, similar a = Path, Query, etc.
.                                |
.                                |  UploadFile:
.                                |------------------------------------
.                                |     Tipo de dato. Objeto con 3 atributos principales:
.                                |         .filename       ->      Nombre del archivo
.                                |         .conten_type    ->      Tipo/Formato de archivo
.                                |         .file           ->      El File


    var: UploadFile = File(value)                       Especificar parametro como file.        REQUIERE IMPORTACION
.                                                       Especificar tipo de dato UploadFile     REQUIERE IMPORTACION

                                                        ej....................................
                                                            from fastapi import UploadFile, File
                                                            @app.post(path=/URL/post-image)
                                                            def post_image(var1: UploadFile = File(...)):
                                                                return{
                                                                    'File_name': var1.filename,
                                                                    'Format': var1.content_type,
                                                                    'Size(bytes)' : len(var1.file.read())
                                                                    "Size(kb)": round(len(image.file.read())/1024, ndigits=2)
                                                                }

    var1.filename,                                      Entrega el file name
    var1.content_type                                   Entrega tipo de archivo
    len(var1.file.read())                               Entrega los bytes. Lee el file y cuenta los bites
    round(len(image.file.read())/1024, ndigits=2)       Entrega los kilobites. Lee el file, cuenta los bites, los divide en 1024, permite 2 numeros posterior al punto, y hace redondeo.


------------------------------------------------------------------------------	
		Otros parametros especiales.  
   	-------------------------------

.                                   Header.  
.                               -------------------
.                               |    Validacion y metadatos = Path, Query, etc.
.                               |    Los Headers poseen "-" que No es valido en Python. Esta clase las convierte hacia y desde "_"

	Header()											-Header parameters (
.															from fastapi import FastAPI, Header
.															def func(var : type = Header(value)):



.                                   Cookie.  
.                                --------------------
.                               |    Validacion y metadatos = Path, Query, etc.
.                               |    Al manejar cookies, si no se declaran como tal, seran manejadas como query parameters

	Cookie()											-Cookie parameters (ver en Cookies)
.															from fastapi import Cookie
.															def func(var : type = Cookie(value)):


                                                              



------------------------------------------------------------------------------	
	HTTPException / Manejo de Errores                           Clase HTTPException. Controlar funcionamiento de los errores
-------------------------------


    HTTPException()                                     Clase para errores. REQUIERE IMPORTACION desde FastAPI. 
                                                            Validaciones y Metadatos = Path, Query, etc.

    raise                                               Levantar un error. Especificar error en la path operator function
                                                            raise HTTPException()

.                                                       ej....................................
.                                                           from fastapi import HTTPException 

.                                                           @app.get(path='/URL/{person_id}', status_code=status.HTTP_200_OK)
.                                                           def search_person(person_id: int = Path(..., INSTRUCTIONS)):
.                                                               if person_id not in BBDD_var:
.                                                                   raise HTTPException(
.                                                                       status_code = status.HTTP_404_NOT_FOUND,
.                                                                       detail = 'Person not found'
.                                                                   )
.                                                               return {person_id: 'it exists!'}



------------------------------------------------------------------------------	
	Docstring                                       String que describe módulo/función/clase en python. Con fastApi automátic visible en la documentación interactiva. “Markdown friendly”
-------------------------------

    '''  '''                                        Crear docstrings


    '''                                             Orden de docstrings en las funciones
    Título                                              -título o nombre de la función
    Descripción                                         -cómo se usa y qué es lo que hace
    Parámetros                                          -parámetros de la función
    Resultado                                           -lo que devuelve la función
    '''
                                                        ej. ----------------------------------------------
                                                            @app.post()
                                                            def create_person(person: Person = Body(...)):
                                                                '''
                                                                    Create Person

                                                                    This path operation creates a person in the app and save the information in the database
                                                                    
                                                                    Parameters:
                                                                    - Request body parameter:
                                                                        - person: Person -> A person model with first name, last name, age, hair color and marital status
                                                                    
                                                                    Returns a person model with first name, last name, age, hair color and marital status
                                                                '''
                                                                return person

------------------------------------------------------------------------------	
	deprecated                                       Dejar funcion inusable para remplazarla por otra, pero sin borrar el codigo.
-------------------------------


deprecated=True                                     Deprecar una funcion. 
                                                         @app.get('/URL/', deprecated=True) 




------------------------------------------------------------------------------	
	JSON                                     
-------------------------------
Un objeto JSON 
    Forma similar a diccionario de python. 
    Keys son strings.
    { "name":"John", "age":30, "city":"New York"}





import json

json.loads(JSON_type)                               Trasformar un JSON string a Python object 
                                                            "{:}" => {:}
json.load()

json.dumps(py_obj)                                  Transformar un Python object a JSON string 
                                                        indent=4        Transformar un Python object a JSON string preservando identacion de 4. Sino sera todo en linea.
                                                        sort_keys=True  Al transformar, ordena claves por orden alfabetico (a,b,c,d...)

                                                        Python object ------> Result= JSON string (javascript) equivalent
                                                        ------------------------------------------------------------------
                                                            dict	=>  Object          {:} => {:}      
                                                            list	=>  Array           [,] => [,]      
                                                            tuple	=>  Array           (,) => [,]  
                                                            str	    =>  String          ""  => ""   
                                                            int	    =>  Number          42  => 42   
                                                            float	=>  Number          0.6 => 0.6      
                                                            True	=>  true            True => true 
                                                            False	=>  false           False => false
                                                            None	=>  null            None => null 






json.dump()

------------------------------------------------------------------------------	
	Faltantes.
-------------------------------

-Autentificacion
-conexion a bases de datos