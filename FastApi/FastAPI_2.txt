------------------------------------------------------------------------------	
	Tipos de entradas de datos en FastAPI: 
-------------------------------

    Path Parameters         ->      URL ('str') (bligatorios)
    Query Parameters        ->      URL ('str') (opcionales)
    Request Body            ->      JSON
    Formularios             ->      Campos del frontend (No JSON)
    Headers                 ->      Cabeceras HTTP que pueden ser de cliente a servidor y viceversa
    Cookies                 ->      Almacenan información
    File                    ->      Archivos como imágenes, audio, vídeo, etc.
    Upload File                     (3 parámetros:)
            Filename        ->      Nombre del archivo
            Content_Type    ->      Tipo/Formato de archivo
            File            ->      El File



------------------------------------------------------------------------------	
	Predefined values en Path param/ Query param                    Valores predefinidos
-------------------------------


    from enum import Enum                           1.- Importacion ENUM

    class Model1(str, Enum):                        2.- Crear modelo con opciones predefinidas
        azul = "azul"                                       -especificar type  -heredar de Enum
        rojo = "rojo"

    @app.get("/{option}")                           
    async def get_model(option: Model1):            3.- Path parametro poner como type al Modelo creado.
        if option is Model1.azul:                   
        if option.value == "rojo":
        return



------------------------------------------------------------------------------	
	Files/ file parameters                         
-------------------------------

    param: type = File(...)                         Ingreso de File segun tipo indicado (bytes, etc)
    param: UploadFile = File(...)			        Ingreso de File segun tipo UploadFile (tipo especial que agrega mas caracteristicas y ventajas vs bytes)
                                                            
                                                    Caracteristicas
                                                    ----------------------------
                                                        Files herada de Form (que hereda de Body)
                                                        Receive Files from forms HTML fields (<form></form>) instead of JSON (Body).    
                                                        Request body/ POST, PUT, DELETE.  Recepcion de informacion desde el cliente
                                                            BBDD guarda ruta para acceder al file/ Server guarda el File

                                                        Identificacion por FastAPI:  Requiere declarar clase Files
                                                        Valor: 	HTML special encoding data (part HTTP protocol). 
                                                                    (application/x-www-form-urlencoded or multipart/form-data)

                                                        ----------------------------------------------------------------------
                                                            1.- Instalar libreria requerida
                                                            2.- Importar clase 
                                                            3.- Declarar type - UploadFile, ingresar como valor la clase File.


                                                            pip install python-multipart                         
                                                                -------------
                                                            from fastapi import File, UploadFile
                                                            
                                                            @app.post('/post-image')
                                                            def post_image(var1: UploadFile = File(...)):
                                                                return{
                                                                    'File_name': var1.filename,
                                                                    'Format': var1.content_type,
                                                                    'Size(bytes)' : len(var1.file.read())
                                                                    "Size(kb)": round(len(image.file.read())/1024, ndigits=2)
                                                                }

    files: list[UploadFile] = File()                Upload several files at the same time. Recibir varios files al mismo tiempo     
                                                        Se guardaran como listas. Manipular files con metodos list.
                                                        [file1, file 2, file 3]



    UploadFile
    -----------------------------------------------  
        Attributes
        -------------------------
            .filename,                                      Da un str con el nombre original del File
            .content_type                                   Da un str con el formato del File (e.g. image/jpeg)                          
            .file:                                          Da el file como Python object (file-like  object)(SpooledTemporaryFile). Can pass directly to other functions or libraries that expect a python object.

        Methods  (Async)
        --------------------------
            .write(inf)                                     Writes inf (str or bytes) to the file. Async method
            .read(size#)                                    Reads # size bytes/characters of the file. Async method
            .seek(#)                                        Goes to the byte position  in the file. Async method
            .close():                                       Closes the file.

                                                            Async method
                                                            -----------------------------------------------
                                                            Para usar beneficio declarar await. (solo si funcion es tmb asincronica)
                                                            
                                                                def xxx ():
                                                                    var =  file.read()

                                                                    ||
                                                                    VV

                                                                async def xxx ():
                                                                    var = await file.read()


        len(image.file.read())                              Contar los bytes de un archivo
        round(len(image.file.read())/1024, ndigits=2)       Contar los kilobites de un archivo. 
                                                                1kb = 1024bytes
                                                                round       Redondea
                                                                ndigits     Decimales a mostrar. 










------------------------------------------------------------------------------	
	Otros parametros especiales.  
-------------------------------

.                                   Header.  
.                               -------------------
.                               |    Validacion y metadatos = Path, Query, etc.
.                               |    Los Headers poseen "-" que No es valido en Python. Esta clase las convierte hacia y desde "_"

	Header()											-Header parameters (
.															from fastapi import FastAPI, Header
.															def func(var : type = Header(value)):



.                                   Cookie.  
.                                --------------------
.                               |    Validacion y metadatos = Path, Query, etc.
.                               |    Al manejar cookies, si no se declaran como tal, seran manejadas como query parameters

	Cookie()											-Cookie parameters (ver en Cookies)
.															from fastapi import Cookie
.															def func(var : type = Cookie(value)):


                                                              



------------------------------------------------------------------------------	
	HTTPException / Manejo de Errores                           Clase HTTPException. Controlar funcionamiento de los errores
-------------------------------


    HTTPException()                                         Clase para errores. REQUIERE IMPORTACION desde FastAPI. 
                                                                from fastapi import HTTPException

    raise                                                   Levantar un error. Especificar error en la path operator function
                                                                raise HTTPException()

    HTTPException(
        status_code =                                       Muestra un status code deseado (mas comun 404)

        detail = ''                                         Regresa al cliente un JSON con un str con texto que deseamos sea retornado. 
        detail = Objet                                      Regresa al cliente un JSON con cualquier cosa que deseemos. Automaticamente sera transformado a JSON

        headers={"": ""}                                    Regresar un custom headers to the HTTP error.

        
                                                            ....................................
                                                                from fastapi import HTTPException 

                                                                @app.get(path='/URL/{person_id}', status_code=status.HTTP_200_OK)
                                                                def search_person(person_id: int = Path(..., INSTRUCTIONS)):
                                                                    if person_id not in BBDD_var:
                                                                        raise HTTPException(
                                                                        status_code = status.HTTP_404_NOT_FOUND,
                                                                        detail = 'Person not found'
                                                                        )
                                                                    return {person_id: 'it exists!'}

    Advance handling Errores                                https://fastapi.tiangolo.com/tutorial/handling-errors/



------------------------------------------------------------------------------	
	Docstring                                       String que describe módulo/función/clase en python. Con fastApi automátic visible en la documentación interactiva. “Markdown friendly”
-------------------------------

    '''  '''                                            Crear docstrings


    '''                                                 Orden de docstrings en las funciones
    Título                                                  -título o nombre de la función
    Descripción                                             -cómo se usa y qué es lo que hace
    Parámetros                                              -parámetros de la función
    Resultado                                               -lo que devuelve la función
    '''
                                                            ej. ----------------------------------------------
                                                                @app.post()
                                                                def create_person(person: Person = Body(...)):
                                                                    '''
                                                                        Create Person

                                                                        This path operation creates a person in the app and save the information in the database
                                                                        
                                                                        Parameters:
                                                                        - Request body parameter:
                                                                            - person: Person -> A person model with first name, last name, age, hair color and marital status
                                                                        
                                                                        Returns a person model with first name, last name, age, hair color and marital status
                                                                    '''
                                                                    return person

------------------------------------------------------------------------------	
	Tags                                      
-------------------------------

                                                        Multiples tags con Enum
                                                        -------------------------------------
    from enum import Enum                               Importar Enum

    class My_Tags(Enum):                                Clase que hereda de Enum, con los tags enumerados
        items = "items"
        users = "users"

    @app.get("/items/", tags=[Tags.items])              Pasar como valor la clase.atrib (representa la Tag)
    @app.get("/users/", tags=[Tags.users])




------------------------------------------------------------------------------	
	JSON                                     
-------------------------------
Un objeto JSON 
    Forma similar a diccionario de python. 
    { "name":"John", "age":30, "city":"New York"}

Datos compatibles con JSON
    str, dict, list,
Datos compatibles con JSON
    datetime objects



    import json

    json.loads(JSON_type)                               Trasformar un JSON string a Python object 
                                                                "{:}" => {:}

    json.dumps(py_obj)                                  Transformar un Python object a JSON string 
                                                            indent=4        Transformar un Python object a JSON string preservando identacion de 4. Sino sera todo en linea.
                                                            sort_keys=True  Al transformar, ordena claves por orden alfabetico (a,b,c,d...)

                                                            Python object ------> Result= JSON string (javascript) equivalent
                                                            ------------------------------------------------------------------
                                                                dict	=>  Object          {:} => {:}      
                                                                list	=>  Array           [,] => [,]      
                                                                tuple	=>  Array           (,) => [,]  
                                                                str	    =>  String          ""  => ""   
                                                                int	    =>  Number          42  => 42   
                                                                float	=>  Number          0.6 => 0.6      
                                                                True	=>  true            True => true 
                                                                False	=>  false           False => false
                                                                None	=>  null            None => null 

    json.load()                                         Convertir JSON formateado por .read() a python Object 
    json.dump()                                         Convertir objeto python a JSON formateado a file-like object (Para .write())


    jsonable_encoder(obj)                               Convertir a JSON compatible data. Requiere Importacion.
                                                            from fastapi.encoders import jsonable_encoder
                                                            var = jsonable_encoder(item) 

                                                        Returns a Python standard data structure (e.g. a dict) with values and sub-values that are all compatible with JSON.
                                                                Python object ------> Result= JSON string (javascript) equivalent
                                                                ------------------------------------------------------------------
                                                                    dict	=>  Object          {:} => {:}      
                                                                    list	=>  Array           [,] => [,]      
                                                                    tuple	=>  Array           (,) => [,]  
                                                                    str	    =>  String          ""  => ""   
                                                                    int	    =>  Number          42  => 42   
                                                                    float	=>  Number          0.6 => 0.6      
                                                                    True	=>  true            True => true 
                                                                    False	=>  false           False => false
                                                                    None	=>  null            None => null 


------------------------------------------------------------------------------	
	SQL Database                                     
-------------------------------

"ORM": an "object-relational mapping" library.

ORM has tools to convert ("map") between objects in code and database tables ("relations"), to make the connections or relations between tables or entities.


Common ORMs example:
-SQLAlchemy ORM (part of SQLAlchemy, independent of framework) 
-Peewee (independent of framework)
-Django-ORM (part of the Django framework)
-etc.


    
    SQLAlchemy ORM        (No Async)                                                    https://fastapi.tiangolo.com/tutorial/sql-databases/
-------------------------------

    1.- pip install sqlalchemy
    2.- create module for database (database.py)
            project
            └── app
                ├── __init__.py
                ├── crud.py
                ├── schemas.py          <=  the Pydantic models/schemas
                ├── main.py
                ├── models.py           <=  the SQLAlchemy models
                └── database.py

    3.- Desarrollar Configuracion de la Database. (database.py)                          ??????????????????? DB URL

        3.1.- Importaciones
        3.2.- Instanciar URL, engine, session y la base                                
            
                        database.py
            ------------------------------------------------
            from sqlalchemy import create_engine
            from sqlalchemy.ext.declarative import declarative_base
            from sqlalchemy.orm import sessionmaker

            SQLALCHEMY_DATABASE_URL = "sqlite:///./sql_app.db"                                      <= URL para conectar con database. (ej. SQLite database)  (# postgresql => "postgresql://user:password@postgresserver/db")

            engine = create_engine(                                                                 <= Crear engine. (SQLite requiere "check_same_thread": False, para usar multiples)
                SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
            )
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)             <= Instance will be the actual database session.

            Base = declarative_base()                                                               <= Instance will be will be a class used to create each of the database models or classes (the ORM models)
            ------------------------------------------------    

    4.- Crear database models. (models.py)                                               ????????????????????????????? Clases, types, Column() relationship

                        models.py
            ------------------------------------------------
            from .database import Base                                                              <= Importar Base de database.py (ver arriba)

            from sqlalchemy import Integer, String, Boolean, ForeignKey                             <= Importar SQLAlchemy class "type" (para definir tipos)
            from sqlalchemy import Column                                                           <= Importar funcion Column (para crear columnas)
            from sqlalchemy.orm import relationship                                                 <= importar relationship para crear relaciones entre tablas (attribute will contain the values from other tables related to this one)

            class User(Base):                                                                       <= Crear tabla (Modelo). Heredar de Base.
                __tablename__ = "users"                                                                 <= Indica el nombre de la tabla

                id = Column(Integer, primary_key=True, index=True)                                      <= Crear columns. attribute = Column(type)
                email = Column(String, unique=True, index=True)
                hashed_password = Column(String)
                is_active = Column(Boolean, default=True)

                items = relationship("Item", back_populates="owner")                                    <= Crear relationship entre tablas. atributte = relationship("Tabla(modelo)")


            class Item(Base):
                __tablename__ = "items"

                id = Column(Integer, primary_key=True, index=True)
                title = Column(String, index=True)
                description = Column(String, index=True)
                owner_id = Column(Integer, ForeignKey("users.id"))

                owner = relationship("User", back_populates="items")

            ------------------------------------------------    

    5.- Permitir Modelos pydantic a leer datos de ORMs (SQLAlchemy) 

        Permitira no solo leer Diccionarios, sino tambien objetos de ORMs.         
              id = data["id"]      =>       id = data.id        
        Haciendolo pueden volverse response_model

                        schema.py
            ------------------------------------------------
            class ItemBase(BaseModel):
                title: str
                description: Union[str, None] = None

            class ItemCreate(ItemBase):
                pass

            class Item(ItemBase):
                id: int
                owner_id: int
                class Config:                                                                       <= Crear subclasse Config. 
                    orm_mode = True                                                                     <= Dar atributo orm_mode = True
            ------------------------------------------------

    6.- Crear funciones para CRUD. (crud.py)

        Tendra nuestras funciones reutilizables para interactuar con la database
        Create, Read, Update, and Delete

                    crud.py
            ------------------------------------------------
            from sqlalchemy.orm import Session
            from . import models, schemas                                                           <= models (SQLAlchemy models) and schemas (Pydantic models / schemas).


            #Read
            #---------------------------------------------------------------------
            def get_user(db: Session, user_id: int):                                                <= Argumentos db: Session (db representara a la BBDD)
                return db.query(models.User).filter(models.User.id == user_id).first()              <= regresa la primera (.first) concordancia de id con id de BBDD (.filter(models.User.id == user_id)) de la tabla de Usuarios de la BBDD (db.query(models.User)) 

            def get_user_by_email(db: Session, email: str):
                return db.query(models.User).filter(models.User.email == email).first()             <= regresa la primera (.first) concordancia de email con email de BBDD (.filter(models.User.id == user_id)) de la tabla de Usuarios de la BBDD (db.query(models.User)) 

            def get_users(db: Session, skip: int = 0, limit: int = 100):                            <= Regresa todos los Users (limitando 100)
                return db.query(models.User).offset(skip).limit(limit).all()

            #Create
            #---------------------------------------------------------------------
            def create_user(db: Session, user: schemas.UserCreate):
                db_user = models.User(                                                              1.- Instancia SQLAlchemy model with your data
                    email = user.email, 
                    hashed_password = HashealoMyFriendo(user.password
                    )

                db.add(db_user)                                                                     2.- Agregar Instancia a BBDD
                db.commit()                                                                         3.- Guardar los cambios en BBDD
                db.refresh(db_user) 
                                                                                4.- Reload y se agregan los datos automaticos (like the generated ID) 
                return db_user


            def create_user_item(db:Session,    item:schemas.ItemCreate,    user_id:int):
                db_item = models.Item(**item.dict(), owner_id=user_id)                              *Se convirtio en Dic, para mandar multiples datos como key-value. Ademas de poder agregar dato extra user_id que se tratara como key-value

                db.add(db_item)
                db.commit()
                db.refresh(db_item)

                return db_item

    7.- Integrar lo realizado a la APP (main.py)

        1.- Importar todo
        2.- Crear dependencia (abrir y cerrar conexion/sesion con DDBB)
        3.- Agregar la conexion a BBDD a la path operation function. 
                db: Session = Depends(get_db)
        4.- Llama a las funciones CRUD de crud.py
        5.- Responder con response_model que tienen clase anidada orm_mode
                Values return are SQLAlchemy models, or lists of SQLAlchemy models. But response_model (Pydantic models) with schemas using orm_mode
                will extracte the value, and returned to the client, with all the normal filtering and validation.


                    main.py
            ------------------------------------------------
            from sqlalchemy.orm import Session                          <=Permite a FastAPI conocer los metodos de la clase Session (.query(), .add(), .refresh(), .commit(), etc)          
            from . import crud, models, schemas
            from .database import SessionLocal, engine

            from fastapi import Depends

            models.Base.metadata.create_all(bind=engine)

            # Dependency
            def get_db():
                db = SessionLocal()
                try:
                    yield db
                finally:
                    db.close()


            @app.post("/users/", response_model=schemas.User)
            def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
                db_user = crud.get_user_by_email(db, email=user.email)
                if db_user:
                    raise HTTPException(status_code=400, detail="Email already registered")
                return crud.create_user(db=db, user=user)

            @app.get("/users/{user_id}", response_model=schemas.User)
            def read_user(user_id: int, db: Session = Depends(get_db)):
                db_user = crud.get_user(db, user_id=user_id)
                if db_user is None:
                    raise HTTPException(status_code=404, detail="User not found")
                return db_user

            @app.post("/users/{user_id}/items/", response_model=schemas.Item)
            def create_item_for_user(
                user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)
            ):
                return crud.create_user_item(db=db, item=item, user_id=user_id)

------------------------------------------------------------------------------	
	Updates / Partial updates.                                     
-------------------------------


Actualizar data stored as JSON (e.g. NoSQL database). (file.JSON, texto plano, etc.)

    Complete Update 
                                                        HTTP PUT
                                                        Todos los datos se actualizan)
                                                            => Atributos no actualizados se trasformara a none o ganara el valor default aunque previamente ya tenian un valor)

                                                        --------------------------------------------------------------------------------------------
                                                            itemsList = {
                                                                "item1": {"name": "Foo", "price": 50.2},
                                                                "item2": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
                                                                "item3": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
                                                            }
                                                            @app.put("/{item_id}")                                                                              <----Comprender que si viene de otro modulo, debe usar metodo WITH, y hacer conversiones necesarias.
                                                            async def update_item(item_id: str, item: ItemModel):
                                                                update_item_encoded = jsonable_encoder(item)
                                                                itemsList[item_id] = update_item_encoded
                                                                return update_item_encoded


    Partial Update 
                                                        HTTP PATH                               (Aunq la mayoria usa erroneamente PUT. FastAPI comprende el error y puedes usar cualquiera de los dos)
                                                        Se actualizan datos deseados.
                                                            =>Los demas no actualizados se mantendran sin cambio

                                                        exclude_unset
                                                        item.dict(exclude_unset=True)           generate a dict with only the data that was set when creating the item model, excluding default values

                                                        --------------------------------------------------------------------------------------------
                                                            itemsList = {
                                                                        "item1": {"name": "Foo", "price": 50.2},
                                                                        "item2": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
                                                                        "item3": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
                                                                    }
                                                            @app.patch("/items/{item_id}", response_model=Item)                                                 <----Comprender que si viene de otro modulo, debe usar metodo WITH, y hacer conversiones necesarias.
                                                            async def update_item(item_id: str, item: Item):
                                                                stored_item_data = items[item_id]
                                                                stored_item_model = Item(**stored_item_data)
                                                                update_data = item.dict(exclude_unset=True)
                                                                updated_item = stored_item_model.copy(update=update_data)
                                                                items[item_id] = jsonable_encoder(updated_item)
                                                                return updated_item



------------------------------------------------------------------------------	
	Faltantes.
-------------------------------

-Autentificacion
-updates
-conexion a bases de datos
